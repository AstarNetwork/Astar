(function() {var type_impls = {
"astar_runtime":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BeforeAllRuntimeMigrations-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-BeforeAllRuntimeMigrations-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; BeforeAllRuntimeMigrations for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.before_all_runtime_migrations\" class=\"method trait-impl\"><a href=\"#method.before_all_runtime_migrations\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">before_all_runtime_migrations</a>() -&gt; Weight</h4></section></summary><div class='docblock'>Something that should happen before runtime migrations are executed.</div></details></div></details>","BeforeAllRuntimeMigrations","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Callable%3CT%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Callable%3CT%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; Callable&lt;T&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.RuntimeCall\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.RuntimeCall\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a class=\"associatedtype\">RuntimeCall</a> = Call&lt;T&gt;</h4></section></div></details>","Callable<T>","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Pallet&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Pallet&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/clone.rs.html#172\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Pallet&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GetStorageVersion-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-GetStorageVersion-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; GetStorageVersion for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.InCodeStorageVersion\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.InCodeStorageVersion\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a class=\"associatedtype\">InCodeStorageVersion</a> = StorageVersion</h4></section></summary><div class='docblock'>This type is generated by the <a href=\"crate::pallet\"><code>pallet</code></a> macro. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.in_code_storage_version\" class=\"method trait-impl\"><a href=\"#method.in_code_storage_version\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">in_code_storage_version</a>() -&gt; &lt;Pallet&lt;T&gt; as GetStorageVersion&gt;::InCodeStorageVersion</h4></section></summary><div class='docblock'>Returns the in-code storage version as specified in the\n<a href=\"crate::pallet_macros::storage_version\"><code>storage_version</code></a> attribute, or\n[<code>NoStorageVersionSet</code>] if the attribute is missing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_chain_storage_version\" class=\"method trait-impl\"><a href=\"#method.on_chain_storage_version\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_chain_storage_version</a>() -&gt; StorageVersion</h4></section></summary><div class='docblock'>Returns the storage version of the pallet as last set in the actual on-chain storage.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.current_storage_version\" class=\"method trait-impl\"><a href=\"#method.current_storage_version\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">current_storage_version</a>() -&gt; Self::InCodeStorageVersion</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">๐</span><span>Deprecated: This method has been renamed to <code>in_code_storage_version</code> and will be removed after March 2024.</span></div></span><div class='docblock'>DEPRECATED: Use [<code>Self::current_storage_version</code>] instead. <a>Read more</a></div></details></div></details>","GetStorageVersion","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hooks%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Hooks%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; Hooks&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_initialize\" class=\"method trait-impl\"><a href=\"#method.on_initialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_initialize</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n) -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Weight: see <code>begin_block</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_finalize\" class=\"method trait-impl\"><a href=\"#method.on_finalize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_finalize</a>(_n: BlockNumber)</h4></section></summary><div class='docblock'>Block finalization hook. This is called at the very end of block execution. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_idle\" class=\"method trait-impl\"><a href=\"#method.on_idle\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_idle</a>(_n: BlockNumber, _remaining_weight: Weight) -&gt; Weight</h4></section></summary><div class='docblock'>Hook to consume a blockโs idle time. This will run when the block is being finalized (before\n[<code>Hooks::on_finalize</code>]). <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_poll\" class=\"method trait-impl\"><a href=\"#method.on_poll\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_poll</a>(_n: BlockNumber, _weight: &amp;mut WeightMeter)</h4></section></summary><div class='docblock'>A hook to run logic after inherent application. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class='docblock'>Hook executed when a code change (aka. a โruntime upgradeโ) is detected by the FRAME\n<code>Executive</code> pallet. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offchain_worker\" class=\"method trait-impl\"><a href=\"#method.offchain_worker\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">offchain_worker</a>(_n: BlockNumber)</h4></section></summary><div class='docblock'>Implementing this function on a pallet allows you to perform long-running tasks that are\ndispatched as separate threads, and entirely independent of the main blockchain execution. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.integrity_test\" class=\"method trait-impl\"><a href=\"#method.integrity_test\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">integrity_test</a>()</h4></section></summary><div class='docblock'>Check the integrity of this palletโs configuration. <a>Read more</a></div></details></div></details>","Hooks<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntegrityTest-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-IntegrityTest-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; IntegrityTest for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.integrity_test\" class=\"method trait-impl\"><a href=\"#method.integrity_test\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">integrity_test</a>()</h4></section></summary><div class='docblock'>See [<code>Hooks::integrity_test</code>].</div></details></div></details>","IntegrityTest","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OffchainWorker%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OffchainWorker%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OffchainWorker&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.offchain_worker\" class=\"method trait-impl\"><a href=\"#method.offchain_worker\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">offchain_worker</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n)</h4></section></summary><div class='docblock'>This function is being called after every block import (when fully synced). <a>Read more</a></div></details></div></details>","OffchainWorker<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnFinalize%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnFinalize%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnFinalize&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_finalize\" class=\"method trait-impl\"><a href=\"#method.on_finalize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_finalize</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n)</h4></section></summary><div class='docblock'>See [<code>Hooks::on_finalize</code>].</div></details></div></details>","OnFinalize<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnGenesis-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnGenesis-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnGenesis for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_genesis\" class=\"method trait-impl\"><a href=\"#method.on_genesis\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_genesis</a>()</h4></section></summary><div class='docblock'>Something that should happen at genesis.</div></details></div></details>","OnGenesis","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnIdle%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnIdle%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnIdle&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_idle\" class=\"method trait-impl\"><a href=\"#method.on_idle\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_idle</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n    remaining_weight: Weight,\n) -&gt; Weight</h4></section></summary><div class='docblock'>See [<code>Hooks::on_idle</code>].</div></details></div></details>","OnIdle<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnInitialize%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnInitialize%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnInitialize&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_initialize\" class=\"method trait-impl\"><a href=\"#method.on_initialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_initialize</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n) -&gt; Weight</h4></section></summary><div class='docblock'>See [<code>Hooks::on_initialize</code>].</div></details></div></details>","OnInitialize<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnPoll%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnPoll%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnPoll&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_poll\" class=\"method trait-impl\"><a href=\"#method.on_poll\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_poll</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n    weight: &amp;mut WeightMeter,\n)</h4></section></summary><div class='docblock'>Code to execute every now and then at the beginning of the block after inherent application. <a>Read more</a></div></details></div></details>","OnPoll<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnRuntimeUpgrade for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class='docblock'>See [<code>Hooks::on_runtime_upgrade</code>].</div></details></div></details>","OnRuntimeUpgrade","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.backing_for\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">backing_for</a>(\n    proposal: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;</h4></section></summary><div class=\"docblock\"><p>Get the amount locked in support of <code>proposal</code>; <code>None</code> if proposal isnโt a valid proposal\nindex.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.maturing_referenda_at\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">maturing_referenda_at</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>, ReferendumStatus&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number, Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;)&gt;</h4></section></summary><div class=\"docblock\"><p>Get all referenda ready for tally at block <code>n</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.internal_start_referendum\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">internal_start_referendum</a>(\n    proposal: Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;,\n    threshold: VoteThreshold,\n    delay: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Start a referendum.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.internal_cancel_referendum\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">internal_cancel_referendum</a>(ref_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class=\"docblock\"><p>Remove a referendum.</p>\n</div></details></div></details>",0,"astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.propose\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">propose</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal: Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;,\n    value: &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Propose a sensitive action to be taken.</p>\n<p>The dispatch origin of this call must be <em>Signed</em> and the sender must\nhave funds to cover the deposit.</p>\n<ul>\n<li><code>proposal_hash</code>: The hash of the proposal preimage.</li>\n<li><code>value</code>: The amount of deposit (must be at least <code>MinimumDeposit</code>).</li>\n</ul>\n<p>Emits <code>Proposed</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.second\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">second</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Signals agreement with a particular proposal.</p>\n<p>The dispatch origin of this call must be <em>Signed</em> and the sender\nmust have funds to cover the deposit, equal to the original deposit.</p>\n<ul>\n<li><code>proposal</code>: The index of the proposal to second.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.vote\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">vote</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    ref_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n    vote: AccountVote&lt;&lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Vote in a referendum. If <code>vote.is_aye()</code>, the vote is to enact the proposal;\notherwise it is a vote to keep the status quo.</p>\n<p>The dispatch origin of this call must be <em>Signed</em>.</p>\n<ul>\n<li><code>ref_index</code>: The index of the referendum to vote for.</li>\n<li><code>vote</code>: The vote configuration.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.emergency_cancel\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">emergency_cancel</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    ref_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule an emergency cancellation of a referendum. Cannot happen twice to the same\nreferendum.</p>\n<p>The dispatch origin of this call must be <code>CancellationOrigin</code>.</p>\n<p>-<code>ref_index</code>: The index of the referendum to cancel.</p>\n<p>Weight: <code>O(1)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.external_propose\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">external_propose</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal: Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule a referendum to be tabled once it is legal to schedule an external\nreferendum.</p>\n<p>The dispatch origin of this call must be <code>ExternalOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The preimage hash of the proposal.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.external_propose_majority\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">external_propose_majority</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal: Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule a majority-carries referendum to be tabled next once it is legal to schedule\nan external referendum.</p>\n<p>The dispatch of this call must be <code>ExternalMajorityOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The preimage hash of the proposal.</li>\n</ul>\n<p>Unlike <code>external_propose</code>, blacklisting has no effect on this and it may replace a\npre-scheduled <code>external_propose</code> call.</p>\n<p>Weight: <code>O(1)</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.external_propose_default\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">external_propose_default</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal: Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule a negative-turnout-bias referendum to be tabled next once it is legal to\nschedule an external referendum.</p>\n<p>The dispatch of this call must be <code>ExternalDefaultOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The preimage hash of the proposal.</li>\n</ul>\n<p>Unlike <code>external_propose</code>, blacklisting has no effect on this and it may replace a\npre-scheduled <code>external_propose</code> call.</p>\n<p>Weight: <code>O(1)</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fast_track\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fast_track</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal_hash: &lt;T as Config&gt;::Hash,\n    voting_period: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n    delay: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule the currently externally-proposed majority-carries referendum to be tabled\nimmediately. If there is no externally-proposed referendum currently, or if there is one\nbut it is not a majority-carries referendum then it fails.</p>\n<p>The dispatch of this call must be <code>FastTrackOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The hash of the current external proposal.</li>\n<li><code>voting_period</code>: The period that is allowed for voting on this proposal. Increased to\nMust be always greater than zero.\nFor <code>FastTrackOrigin</code> must be equal or greater than <code>FastTrackVotingPeriod</code>.</li>\n<li><code>delay</code>: The number of block after voting has ended in approval and this should be\nenacted. This doesnโt have a minimum amount.</li>\n</ul>\n<p>Emits <code>Started</code>.</p>\n<p>Weight: <code>O(1)</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.veto_external\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">veto_external</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal_hash: &lt;T as Config&gt;::Hash,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Veto and blacklist the external proposal hash.</p>\n<p>The dispatch origin of this call must be <code>VetoOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The preimage hash of the proposal to veto and blacklist.</li>\n</ul>\n<p>Emits <code>Vetoed</code>.</p>\n<p>Weight: <code>O(V + log(V))</code> where V is number of <code>existing vetoers</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cancel_referendum\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">cancel_referendum</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    ref_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Remove a referendum.</p>\n<p>The dispatch origin of this call must be <em>Root</em>.</p>\n<ul>\n<li><code>ref_index</code>: The index of the referendum to cancel.</li>\n</ul>\n<h5 id=\"weight-o1\"><a class=\"doc-anchor\" href=\"#weight-o1\">ยง</a>Weight: <code>O(1)</code>.</h5></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.delegate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">delegate</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    to: &lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source,\n    conviction: Conviction,\n    balance: &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;PostDispatchInfo, DispatchErrorWithPostInfo&lt;PostDispatchInfo&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Delegate the voting power (with some given conviction) of the sending account.</p>\n<p>The balance delegated is locked for as long as itโs delegated, and thereafter for the\ntime appropriate for the convictionโs lock period.</p>\n<p>The dispatch origin of this call must be <em>Signed</em>, and the signing account must either:</p>\n<ul>\n<li>\n<p>be delegating already; or</p>\n</li>\n<li>\n<p>have no voting activity (if there is, then it will need to be removed/consolidated\nthrough <code>reap_vote</code> or <code>unvote</code>).</p>\n</li>\n<li>\n<p><code>to</code>: The account whose voting the <code>target</code> accountโs voting power will follow.</p>\n</li>\n<li>\n<p><code>conviction</code>: The conviction that will be attached to the delegated votes. When the\naccount is undelegated, the funds will be locked for the corresponding period.</p>\n</li>\n<li>\n<p><code>balance</code>: The amount of the accountโs balance to be used in delegating. This must not\nbe more than the accountโs current balance.</p>\n</li>\n</ul>\n<p>Emits <code>Delegated</code>.</p>\n<p>Weight: <code>O(R)</code> where R is the number of referendums the voter delegating to has\nvoted on. Weight is charged as if maximum votes.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.undelegate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">undelegate</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;PostDispatchInfo, DispatchErrorWithPostInfo&lt;PostDispatchInfo&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Undelegate the voting power of the sending account.</p>\n<p>Tokens may be unlocked following once an amount of time consistent with the lock period\nof the conviction with which the delegation was issued.</p>\n<p>The dispatch origin of this call must be <em>Signed</em> and the signing account must be\ncurrently delegating.</p>\n<p>Emits <code>Undelegated</code>.</p>\n<p>Weight: <code>O(R)</code> where R is the number of referendums the voter delegating to has\nvoted on. Weight is charged as if maximum votes.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear_public_proposals\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear_public_proposals</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Clears all public proposals.</p>\n<p>The dispatch origin of this call must be <em>Root</em>.</p>\n<p>Weight: <code>O(1)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unlock\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">unlock</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    target: &lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Unlock tokens that have an expired lock.</p>\n<p>The dispatch origin of this call must be <em>Signed</em>.</p>\n<ul>\n<li><code>target</code>: The account to remove the lock on.</li>\n</ul>\n<p>Weight: <code>O(R)</code> with R number of vote of target.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_vote\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_vote</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Remove a vote for a referendum.</p>\n<p>If:</p>\n<ul>\n<li>the referendum was cancelled, or</li>\n<li>the referendum is ongoing, or</li>\n<li>the referendum has ended such that\n<ul>\n<li>the vote of the account was in opposition to the result; or</li>\n<li>there was no conviction to the accountโs vote; or</li>\n<li>the account made a split vote\nโฆthen the vote is removed cleanly and a following call to <code>unlock</code> may result in more\nfunds being available.</li>\n</ul>\n</li>\n</ul>\n<p>If, however, the referendum has ended and:</p>\n<ul>\n<li>it finished corresponding to the vote of the account, and</li>\n<li>the account made a standard vote with conviction, and</li>\n<li>the lock period of the conviction is not over\nโฆthen the lock will be aggregated into the overall accountโs lock, which may involve\n<em>overlocking</em> (where the two locks are combined into a single lock that is the maximum\nof both the amount locked and the time is it locked for).</li>\n</ul>\n<p>The dispatch origin of this call must be <em>Signed</em>, and the signer must have a vote\nregistered for referendum <code>index</code>.</p>\n<ul>\n<li><code>index</code>: The index of referendum of the vote to be removed.</li>\n</ul>\n<p>Weight: <code>O(R + log R)</code> where R is the number of referenda that <code>target</code> has voted on.\nWeight is calculated for the maximum number of vote.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_other_vote\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_other_vote</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    target: &lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source,\n    index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Remove a vote for a referendum.</p>\n<p>If the <code>target</code> is equal to the signer, then this function is exactly equivalent to\n<code>remove_vote</code>. If not equal to the signer, then the vote must have expired,\neither because the referendum was cancelled, because the voter lost the referendum or\nbecause the conviction period is over.</p>\n<p>The dispatch origin of this call must be <em>Signed</em>.</p>\n<ul>\n<li><code>target</code>: The account of the vote to be removed; this account must have voted for\nreferendum <code>index</code>.</li>\n<li><code>index</code>: The index of referendum of the vote to be removed.</li>\n</ul>\n<p>Weight: <code>O(R + log R)</code> where R is the number of referenda that <code>target</code> has voted on.\nWeight is calculated for the maximum number of vote.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.blacklist\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">blacklist</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal_hash: &lt;T as Config&gt;::Hash,\n    maybe_ref_index: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Permanently place a proposal into the blacklist. This prevents it from ever being\nproposed again.</p>\n<p>If called on a queued public or external proposal, then this will result in it being\nremoved. If the <code>ref_index</code> supplied is an active referendum with the proposal hash,\nthen it will be cancelled.</p>\n<p>The dispatch origin of this call must be <code>BlacklistOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The proposal hash to blacklist permanently.</li>\n<li><code>ref_index</code>: An ongoing referendum whose hash is <code>proposal_hash</code>, which will be\ncancelled.</li>\n</ul>\n<p>Weight: <code>O(p)</code> (though as this is an high-privilege dispatch, we assume it has a\nreasonable value).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cancel_proposal\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">cancel_proposal</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    prop_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Remove a proposal.</p>\n<p>The dispatch origin of this call must be <code>CancelProposalOrigin</code>.</p>\n<ul>\n<li><code>prop_index</code>: The index of the proposal to cancel.</li>\n</ul>\n<p>Weight: <code>O(p)</code> where <code>p = PublicProps::&lt;T&gt;::decode_len()</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_metadata\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_metadata</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    owner: MetadataOwner,\n    maybe_hash: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;T as Config&gt;::Hash&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Set or clear a metadata of a proposal or a referendum.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>origin</code>: Must correspond to the <code>MetadataOwner</code>.\n<ul>\n<li><code>ExternalOrigin</code> for an external proposal with the <code>SuperMajorityApprove</code>\nthreshold.</li>\n<li><code>ExternalDefaultOrigin</code> for an external proposal with the <code>SuperMajorityAgainst</code>\nthreshold.</li>\n<li><code>ExternalMajorityOrigin</code> for an external proposal with the <code>SimpleMajority</code>\nthreshold.</li>\n<li><code>Signed</code> by a creator for a public proposal.</li>\n<li><code>Signed</code> to clear a metadata for a finished referendum.</li>\n<li><code>Root</code> to set a metadata for an ongoing referendum.</li>\n</ul>\n</li>\n<li><code>owner</code>: an identifier of a metadata owner.</li>\n<li><code>maybe_hash</code>: The hash of an on-chain stored preimage. <code>None</code> to clear a metadata.</li>\n</ul>\n</div></details></div></details>",0,"astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PalletInfoAccess-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-PalletInfoAccess-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; PalletInfoAccess for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">index</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Index of the pallet as configured in the runtime.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.name\" class=\"method trait-impl\"><a href=\"#method.name\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">name</a>() -&gt; &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Name of the pallet as configured in the runtime.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.name_hash\" class=\"method trait-impl\"><a href=\"#method.name_hash\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">name_hash</a>() -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">16</a>]</h4></section></summary><div class='docblock'>Two128 hash of name.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.module_name\" class=\"method trait-impl\"><a href=\"#method.module_name\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">module_name</a>() -&gt; &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Name of the Rust module containing the pallet.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.crate_version\" class=\"method trait-impl\"><a href=\"#method.crate_version\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">crate_version</a>() -&gt; CrateVersion</h4></section></summary><div class='docblock'>Version of the crate containing the pallet.</div></details></div></details>","PalletInfoAccess","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PalletsInfoAccess-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-PalletsInfoAccess-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; PalletsInfoAccess for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.count\" class=\"method trait-impl\"><a href=\"#method.count\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">count</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>The number of palletsโ information that this type represents. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.infos\" class=\"method trait-impl\"><a href=\"#method.infos\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">infos</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;PalletInfoData&gt;</h4></section></summary><div class='docblock'>All of the palletsโ information that this type represents.</div></details></div></details>","PalletsInfoAccess","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for Pallet&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Pallet&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StorageInfoTrait-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-StorageInfoTrait-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; StorageInfoTrait for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.storage_info\" class=\"method trait-impl\"><a href=\"#method.storage_info\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">storage_info</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;StorageInfo&gt;</h4></section></div></details>","StorageInfoTrait","astar_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WhitelistedStorageKeys-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-WhitelistedStorageKeys-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; WhitelistedStorageKeys for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.whitelisted_storage_keys\" class=\"method trait-impl\"><a href=\"#method.whitelisted_storage_keys\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">whitelisted_storage_keys</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;TrackedStorageKey&gt;</h4></section></summary><div class='docblock'>Returns a <a href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;TrackedStorageKey&gt;</code></a> indicating the storage keys that\nshould be whitelisted during benchmarking. This means that those keys\nwill be excluded from the benchmarking performance calculation.</div></details></div></details>","WhitelistedStorageKeys","astar_runtime::Democracy"],["<section id=\"impl-Eq-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Eq-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for Pallet&lt;T&gt;</h3></section>","Eq","astar_runtime::Democracy"]],
"local_runtime":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BeforeAllRuntimeMigrations-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-BeforeAllRuntimeMigrations-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; BeforeAllRuntimeMigrations for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.before_all_runtime_migrations\" class=\"method trait-impl\"><a href=\"#method.before_all_runtime_migrations\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">before_all_runtime_migrations</a>() -&gt; Weight</h4></section></summary><div class='docblock'>Something that should happen before runtime migrations are executed.</div></details></div></details>","BeforeAllRuntimeMigrations","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Callable%3CT%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Callable%3CT%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; Callable&lt;T&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.RuntimeCall\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.RuntimeCall\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a class=\"associatedtype\">RuntimeCall</a> = Call&lt;T&gt;</h4></section></div></details>","Callable<T>","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Pallet&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Pallet&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/clone.rs.html#172\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Pallet&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GetStorageVersion-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-GetStorageVersion-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; GetStorageVersion for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.InCodeStorageVersion\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.InCodeStorageVersion\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a class=\"associatedtype\">InCodeStorageVersion</a> = StorageVersion</h4></section></summary><div class='docblock'>This type is generated by the <a href=\"crate::pallet\"><code>pallet</code></a> macro. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.in_code_storage_version\" class=\"method trait-impl\"><a href=\"#method.in_code_storage_version\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">in_code_storage_version</a>() -&gt; &lt;Pallet&lt;T&gt; as GetStorageVersion&gt;::InCodeStorageVersion</h4></section></summary><div class='docblock'>Returns the in-code storage version as specified in the\n<a href=\"crate::pallet_macros::storage_version\"><code>storage_version</code></a> attribute, or\n[<code>NoStorageVersionSet</code>] if the attribute is missing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_chain_storage_version\" class=\"method trait-impl\"><a href=\"#method.on_chain_storage_version\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_chain_storage_version</a>() -&gt; StorageVersion</h4></section></summary><div class='docblock'>Returns the storage version of the pallet as last set in the actual on-chain storage.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.current_storage_version\" class=\"method trait-impl\"><a href=\"#method.current_storage_version\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">current_storage_version</a>() -&gt; Self::InCodeStorageVersion</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">๐</span><span>Deprecated: This method has been renamed to <code>in_code_storage_version</code> and will be removed after March 2024.</span></div></span><div class='docblock'>DEPRECATED: Use [<code>Self::current_storage_version</code>] instead. <a>Read more</a></div></details></div></details>","GetStorageVersion","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hooks%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Hooks%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; Hooks&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_initialize\" class=\"method trait-impl\"><a href=\"#method.on_initialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_initialize</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n) -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Weight: see <code>begin_block</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_finalize\" class=\"method trait-impl\"><a href=\"#method.on_finalize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_finalize</a>(_n: BlockNumber)</h4></section></summary><div class='docblock'>Block finalization hook. This is called at the very end of block execution. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_idle\" class=\"method trait-impl\"><a href=\"#method.on_idle\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_idle</a>(_n: BlockNumber, _remaining_weight: Weight) -&gt; Weight</h4></section></summary><div class='docblock'>Hook to consume a blockโs idle time. This will run when the block is being finalized (before\n[<code>Hooks::on_finalize</code>]). <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_poll\" class=\"method trait-impl\"><a href=\"#method.on_poll\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_poll</a>(_n: BlockNumber, _weight: &amp;mut WeightMeter)</h4></section></summary><div class='docblock'>A hook to run logic after inherent application. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class='docblock'>Hook executed when a code change (aka. a โruntime upgradeโ) is detected by the FRAME\n<code>Executive</code> pallet. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offchain_worker\" class=\"method trait-impl\"><a href=\"#method.offchain_worker\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">offchain_worker</a>(_n: BlockNumber)</h4></section></summary><div class='docblock'>Implementing this function on a pallet allows you to perform long-running tasks that are\ndispatched as separate threads, and entirely independent of the main blockchain execution. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.integrity_test\" class=\"method trait-impl\"><a href=\"#method.integrity_test\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">integrity_test</a>()</h4></section></summary><div class='docblock'>Check the integrity of this palletโs configuration. <a>Read more</a></div></details></div></details>","Hooks<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntegrityTest-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-IntegrityTest-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; IntegrityTest for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.integrity_test\" class=\"method trait-impl\"><a href=\"#method.integrity_test\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">integrity_test</a>()</h4></section></summary><div class='docblock'>See [<code>Hooks::integrity_test</code>].</div></details></div></details>","IntegrityTest","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OffchainWorker%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OffchainWorker%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OffchainWorker&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.offchain_worker\" class=\"method trait-impl\"><a href=\"#method.offchain_worker\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">offchain_worker</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n)</h4></section></summary><div class='docblock'>This function is being called after every block import (when fully synced). <a>Read more</a></div></details></div></details>","OffchainWorker<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnFinalize%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnFinalize%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnFinalize&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_finalize\" class=\"method trait-impl\"><a href=\"#method.on_finalize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_finalize</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n)</h4></section></summary><div class='docblock'>See [<code>Hooks::on_finalize</code>].</div></details></div></details>","OnFinalize<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnGenesis-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnGenesis-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnGenesis for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_genesis\" class=\"method trait-impl\"><a href=\"#method.on_genesis\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_genesis</a>()</h4></section></summary><div class='docblock'>Something that should happen at genesis.</div></details></div></details>","OnGenesis","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnIdle%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnIdle%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnIdle&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_idle\" class=\"method trait-impl\"><a href=\"#method.on_idle\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_idle</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n    remaining_weight: Weight,\n) -&gt; Weight</h4></section></summary><div class='docblock'>See [<code>Hooks::on_idle</code>].</div></details></div></details>","OnIdle<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnInitialize%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnInitialize%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnInitialize&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_initialize\" class=\"method trait-impl\"><a href=\"#method.on_initialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_initialize</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n) -&gt; Weight</h4></section></summary><div class='docblock'>See [<code>Hooks::on_initialize</code>].</div></details></div></details>","OnInitialize<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnPoll%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnPoll%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnPoll&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_poll\" class=\"method trait-impl\"><a href=\"#method.on_poll\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_poll</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n    weight: &amp;mut WeightMeter,\n)</h4></section></summary><div class='docblock'>Code to execute every now and then at the beginning of the block after inherent application. <a>Read more</a></div></details></div></details>","OnPoll<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnRuntimeUpgrade for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class='docblock'>See [<code>Hooks::on_runtime_upgrade</code>].</div></details></div></details>","OnRuntimeUpgrade","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.backing_for\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">backing_for</a>(\n    proposal: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;</h4></section></summary><div class=\"docblock\"><p>Get the amount locked in support of <code>proposal</code>; <code>None</code> if proposal isnโt a valid proposal\nindex.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.maturing_referenda_at\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">maturing_referenda_at</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>, ReferendumStatus&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number, Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;)&gt;</h4></section></summary><div class=\"docblock\"><p>Get all referenda ready for tally at block <code>n</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.internal_start_referendum\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">internal_start_referendum</a>(\n    proposal: Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;,\n    threshold: VoteThreshold,\n    delay: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Start a referendum.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.internal_cancel_referendum\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">internal_cancel_referendum</a>(ref_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class=\"docblock\"><p>Remove a referendum.</p>\n</div></details></div></details>",0,"local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.propose\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">propose</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal: Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;,\n    value: &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Propose a sensitive action to be taken.</p>\n<p>The dispatch origin of this call must be <em>Signed</em> and the sender must\nhave funds to cover the deposit.</p>\n<ul>\n<li><code>proposal_hash</code>: The hash of the proposal preimage.</li>\n<li><code>value</code>: The amount of deposit (must be at least <code>MinimumDeposit</code>).</li>\n</ul>\n<p>Emits <code>Proposed</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.second\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">second</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Signals agreement with a particular proposal.</p>\n<p>The dispatch origin of this call must be <em>Signed</em> and the sender\nmust have funds to cover the deposit, equal to the original deposit.</p>\n<ul>\n<li><code>proposal</code>: The index of the proposal to second.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.vote\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">vote</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    ref_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n    vote: AccountVote&lt;&lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Vote in a referendum. If <code>vote.is_aye()</code>, the vote is to enact the proposal;\notherwise it is a vote to keep the status quo.</p>\n<p>The dispatch origin of this call must be <em>Signed</em>.</p>\n<ul>\n<li><code>ref_index</code>: The index of the referendum to vote for.</li>\n<li><code>vote</code>: The vote configuration.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.emergency_cancel\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">emergency_cancel</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    ref_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule an emergency cancellation of a referendum. Cannot happen twice to the same\nreferendum.</p>\n<p>The dispatch origin of this call must be <code>CancellationOrigin</code>.</p>\n<p>-<code>ref_index</code>: The index of the referendum to cancel.</p>\n<p>Weight: <code>O(1)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.external_propose\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">external_propose</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal: Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule a referendum to be tabled once it is legal to schedule an external\nreferendum.</p>\n<p>The dispatch origin of this call must be <code>ExternalOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The preimage hash of the proposal.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.external_propose_majority\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">external_propose_majority</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal: Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule a majority-carries referendum to be tabled next once it is legal to schedule\nan external referendum.</p>\n<p>The dispatch of this call must be <code>ExternalMajorityOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The preimage hash of the proposal.</li>\n</ul>\n<p>Unlike <code>external_propose</code>, blacklisting has no effect on this and it may replace a\npre-scheduled <code>external_propose</code> call.</p>\n<p>Weight: <code>O(1)</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.external_propose_default\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">external_propose_default</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal: Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule a negative-turnout-bias referendum to be tabled next once it is legal to\nschedule an external referendum.</p>\n<p>The dispatch of this call must be <code>ExternalDefaultOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The preimage hash of the proposal.</li>\n</ul>\n<p>Unlike <code>external_propose</code>, blacklisting has no effect on this and it may replace a\npre-scheduled <code>external_propose</code> call.</p>\n<p>Weight: <code>O(1)</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fast_track\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fast_track</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal_hash: &lt;T as Config&gt;::Hash,\n    voting_period: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n    delay: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule the currently externally-proposed majority-carries referendum to be tabled\nimmediately. If there is no externally-proposed referendum currently, or if there is one\nbut it is not a majority-carries referendum then it fails.</p>\n<p>The dispatch of this call must be <code>FastTrackOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The hash of the current external proposal.</li>\n<li><code>voting_period</code>: The period that is allowed for voting on this proposal. Increased to\nMust be always greater than zero.\nFor <code>FastTrackOrigin</code> must be equal or greater than <code>FastTrackVotingPeriod</code>.</li>\n<li><code>delay</code>: The number of block after voting has ended in approval and this should be\nenacted. This doesnโt have a minimum amount.</li>\n</ul>\n<p>Emits <code>Started</code>.</p>\n<p>Weight: <code>O(1)</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.veto_external\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">veto_external</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal_hash: &lt;T as Config&gt;::Hash,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Veto and blacklist the external proposal hash.</p>\n<p>The dispatch origin of this call must be <code>VetoOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The preimage hash of the proposal to veto and blacklist.</li>\n</ul>\n<p>Emits <code>Vetoed</code>.</p>\n<p>Weight: <code>O(V + log(V))</code> where V is number of <code>existing vetoers</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cancel_referendum\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">cancel_referendum</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    ref_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Remove a referendum.</p>\n<p>The dispatch origin of this call must be <em>Root</em>.</p>\n<ul>\n<li><code>ref_index</code>: The index of the referendum to cancel.</li>\n</ul>\n<h5 id=\"weight-o1\"><a class=\"doc-anchor\" href=\"#weight-o1\">ยง</a>Weight: <code>O(1)</code>.</h5></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.delegate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">delegate</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    to: &lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source,\n    conviction: Conviction,\n    balance: &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;PostDispatchInfo, DispatchErrorWithPostInfo&lt;PostDispatchInfo&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Delegate the voting power (with some given conviction) of the sending account.</p>\n<p>The balance delegated is locked for as long as itโs delegated, and thereafter for the\ntime appropriate for the convictionโs lock period.</p>\n<p>The dispatch origin of this call must be <em>Signed</em>, and the signing account must either:</p>\n<ul>\n<li>\n<p>be delegating already; or</p>\n</li>\n<li>\n<p>have no voting activity (if there is, then it will need to be removed/consolidated\nthrough <code>reap_vote</code> or <code>unvote</code>).</p>\n</li>\n<li>\n<p><code>to</code>: The account whose voting the <code>target</code> accountโs voting power will follow.</p>\n</li>\n<li>\n<p><code>conviction</code>: The conviction that will be attached to the delegated votes. When the\naccount is undelegated, the funds will be locked for the corresponding period.</p>\n</li>\n<li>\n<p><code>balance</code>: The amount of the accountโs balance to be used in delegating. This must not\nbe more than the accountโs current balance.</p>\n</li>\n</ul>\n<p>Emits <code>Delegated</code>.</p>\n<p>Weight: <code>O(R)</code> where R is the number of referendums the voter delegating to has\nvoted on. Weight is charged as if maximum votes.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.undelegate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">undelegate</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;PostDispatchInfo, DispatchErrorWithPostInfo&lt;PostDispatchInfo&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Undelegate the voting power of the sending account.</p>\n<p>Tokens may be unlocked following once an amount of time consistent with the lock period\nof the conviction with which the delegation was issued.</p>\n<p>The dispatch origin of this call must be <em>Signed</em> and the signing account must be\ncurrently delegating.</p>\n<p>Emits <code>Undelegated</code>.</p>\n<p>Weight: <code>O(R)</code> where R is the number of referendums the voter delegating to has\nvoted on. Weight is charged as if maximum votes.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear_public_proposals\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear_public_proposals</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Clears all public proposals.</p>\n<p>The dispatch origin of this call must be <em>Root</em>.</p>\n<p>Weight: <code>O(1)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unlock\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">unlock</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    target: &lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Unlock tokens that have an expired lock.</p>\n<p>The dispatch origin of this call must be <em>Signed</em>.</p>\n<ul>\n<li><code>target</code>: The account to remove the lock on.</li>\n</ul>\n<p>Weight: <code>O(R)</code> with R number of vote of target.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_vote\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_vote</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Remove a vote for a referendum.</p>\n<p>If:</p>\n<ul>\n<li>the referendum was cancelled, or</li>\n<li>the referendum is ongoing, or</li>\n<li>the referendum has ended such that\n<ul>\n<li>the vote of the account was in opposition to the result; or</li>\n<li>there was no conviction to the accountโs vote; or</li>\n<li>the account made a split vote\nโฆthen the vote is removed cleanly and a following call to <code>unlock</code> may result in more\nfunds being available.</li>\n</ul>\n</li>\n</ul>\n<p>If, however, the referendum has ended and:</p>\n<ul>\n<li>it finished corresponding to the vote of the account, and</li>\n<li>the account made a standard vote with conviction, and</li>\n<li>the lock period of the conviction is not over\nโฆthen the lock will be aggregated into the overall accountโs lock, which may involve\n<em>overlocking</em> (where the two locks are combined into a single lock that is the maximum\nof both the amount locked and the time is it locked for).</li>\n</ul>\n<p>The dispatch origin of this call must be <em>Signed</em>, and the signer must have a vote\nregistered for referendum <code>index</code>.</p>\n<ul>\n<li><code>index</code>: The index of referendum of the vote to be removed.</li>\n</ul>\n<p>Weight: <code>O(R + log R)</code> where R is the number of referenda that <code>target</code> has voted on.\nWeight is calculated for the maximum number of vote.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_other_vote\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_other_vote</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    target: &lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source,\n    index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Remove a vote for a referendum.</p>\n<p>If the <code>target</code> is equal to the signer, then this function is exactly equivalent to\n<code>remove_vote</code>. If not equal to the signer, then the vote must have expired,\neither because the referendum was cancelled, because the voter lost the referendum or\nbecause the conviction period is over.</p>\n<p>The dispatch origin of this call must be <em>Signed</em>.</p>\n<ul>\n<li><code>target</code>: The account of the vote to be removed; this account must have voted for\nreferendum <code>index</code>.</li>\n<li><code>index</code>: The index of referendum of the vote to be removed.</li>\n</ul>\n<p>Weight: <code>O(R + log R)</code> where R is the number of referenda that <code>target</code> has voted on.\nWeight is calculated for the maximum number of vote.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.blacklist\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">blacklist</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal_hash: &lt;T as Config&gt;::Hash,\n    maybe_ref_index: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Permanently place a proposal into the blacklist. This prevents it from ever being\nproposed again.</p>\n<p>If called on a queued public or external proposal, then this will result in it being\nremoved. If the <code>ref_index</code> supplied is an active referendum with the proposal hash,\nthen it will be cancelled.</p>\n<p>The dispatch origin of this call must be <code>BlacklistOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The proposal hash to blacklist permanently.</li>\n<li><code>ref_index</code>: An ongoing referendum whose hash is <code>proposal_hash</code>, which will be\ncancelled.</li>\n</ul>\n<p>Weight: <code>O(p)</code> (though as this is an high-privilege dispatch, we assume it has a\nreasonable value).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cancel_proposal\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">cancel_proposal</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    prop_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Remove a proposal.</p>\n<p>The dispatch origin of this call must be <code>CancelProposalOrigin</code>.</p>\n<ul>\n<li><code>prop_index</code>: The index of the proposal to cancel.</li>\n</ul>\n<p>Weight: <code>O(p)</code> where <code>p = PublicProps::&lt;T&gt;::decode_len()</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_metadata\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_metadata</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    owner: MetadataOwner,\n    maybe_hash: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;T as Config&gt;::Hash&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Set or clear a metadata of a proposal or a referendum.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>origin</code>: Must correspond to the <code>MetadataOwner</code>.\n<ul>\n<li><code>ExternalOrigin</code> for an external proposal with the <code>SuperMajorityApprove</code>\nthreshold.</li>\n<li><code>ExternalDefaultOrigin</code> for an external proposal with the <code>SuperMajorityAgainst</code>\nthreshold.</li>\n<li><code>ExternalMajorityOrigin</code> for an external proposal with the <code>SimpleMajority</code>\nthreshold.</li>\n<li><code>Signed</code> by a creator for a public proposal.</li>\n<li><code>Signed</code> to clear a metadata for a finished referendum.</li>\n<li><code>Root</code> to set a metadata for an ongoing referendum.</li>\n</ul>\n</li>\n<li><code>owner</code>: an identifier of a metadata owner.</li>\n<li><code>maybe_hash</code>: The hash of an on-chain stored preimage. <code>None</code> to clear a metadata.</li>\n</ul>\n</div></details></div></details>",0,"local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PalletInfoAccess-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-PalletInfoAccess-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; PalletInfoAccess for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">index</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Index of the pallet as configured in the runtime.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.name\" class=\"method trait-impl\"><a href=\"#method.name\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">name</a>() -&gt; &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Name of the pallet as configured in the runtime.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.name_hash\" class=\"method trait-impl\"><a href=\"#method.name_hash\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">name_hash</a>() -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">16</a>]</h4></section></summary><div class='docblock'>Two128 hash of name.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.module_name\" class=\"method trait-impl\"><a href=\"#method.module_name\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">module_name</a>() -&gt; &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Name of the Rust module containing the pallet.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.crate_version\" class=\"method trait-impl\"><a href=\"#method.crate_version\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">crate_version</a>() -&gt; CrateVersion</h4></section></summary><div class='docblock'>Version of the crate containing the pallet.</div></details></div></details>","PalletInfoAccess","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PalletsInfoAccess-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-PalletsInfoAccess-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; PalletsInfoAccess for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.count\" class=\"method trait-impl\"><a href=\"#method.count\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">count</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>The number of palletsโ information that this type represents. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.infos\" class=\"method trait-impl\"><a href=\"#method.infos\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">infos</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;PalletInfoData&gt;</h4></section></summary><div class='docblock'>All of the palletsโ information that this type represents.</div></details></div></details>","PalletsInfoAccess","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for Pallet&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Pallet&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StorageInfoTrait-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-StorageInfoTrait-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; StorageInfoTrait for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.storage_info\" class=\"method trait-impl\"><a href=\"#method.storage_info\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">storage_info</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;StorageInfo&gt;</h4></section></div></details>","StorageInfoTrait","local_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WhitelistedStorageKeys-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-WhitelistedStorageKeys-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; WhitelistedStorageKeys for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.whitelisted_storage_keys\" class=\"method trait-impl\"><a href=\"#method.whitelisted_storage_keys\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">whitelisted_storage_keys</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;TrackedStorageKey&gt;</h4></section></summary><div class='docblock'>Returns a <a href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;TrackedStorageKey&gt;</code></a> indicating the storage keys that\nshould be whitelisted during benchmarking. This means that those keys\nwill be excluded from the benchmarking performance calculation.</div></details></div></details>","WhitelistedStorageKeys","local_runtime::Democracy"],["<section id=\"impl-Eq-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Eq-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for Pallet&lt;T&gt;</h3></section>","Eq","local_runtime::Democracy"]],
"shibuya_runtime":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BeforeAllRuntimeMigrations-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-BeforeAllRuntimeMigrations-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; BeforeAllRuntimeMigrations for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.before_all_runtime_migrations\" class=\"method trait-impl\"><a href=\"#method.before_all_runtime_migrations\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">before_all_runtime_migrations</a>() -&gt; Weight</h4></section></summary><div class='docblock'>Something that should happen before runtime migrations are executed.</div></details></div></details>","BeforeAllRuntimeMigrations","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Callable%3CT%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Callable%3CT%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; Callable&lt;T&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.RuntimeCall\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.RuntimeCall\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a class=\"associatedtype\">RuntimeCall</a> = Call&lt;T&gt;</h4></section></div></details>","Callable<T>","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Pallet&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Pallet&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/clone.rs.html#172\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Pallet&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GetStorageVersion-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-GetStorageVersion-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; GetStorageVersion for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.InCodeStorageVersion\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.InCodeStorageVersion\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a class=\"associatedtype\">InCodeStorageVersion</a> = StorageVersion</h4></section></summary><div class='docblock'>This type is generated by the <a href=\"crate::pallet\"><code>pallet</code></a> macro. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.in_code_storage_version\" class=\"method trait-impl\"><a href=\"#method.in_code_storage_version\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">in_code_storage_version</a>() -&gt; &lt;Pallet&lt;T&gt; as GetStorageVersion&gt;::InCodeStorageVersion</h4></section></summary><div class='docblock'>Returns the in-code storage version as specified in the\n<a href=\"crate::pallet_macros::storage_version\"><code>storage_version</code></a> attribute, or\n[<code>NoStorageVersionSet</code>] if the attribute is missing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_chain_storage_version\" class=\"method trait-impl\"><a href=\"#method.on_chain_storage_version\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_chain_storage_version</a>() -&gt; StorageVersion</h4></section></summary><div class='docblock'>Returns the storage version of the pallet as last set in the actual on-chain storage.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.current_storage_version\" class=\"method trait-impl\"><a href=\"#method.current_storage_version\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">current_storage_version</a>() -&gt; Self::InCodeStorageVersion</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">๐</span><span>Deprecated: This method has been renamed to <code>in_code_storage_version</code> and will be removed after March 2024.</span></div></span><div class='docblock'>DEPRECATED: Use [<code>Self::current_storage_version</code>] instead. <a>Read more</a></div></details></div></details>","GetStorageVersion","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hooks%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Hooks%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; Hooks&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_initialize\" class=\"method trait-impl\"><a href=\"#method.on_initialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_initialize</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n) -&gt; Weight</h4></section></summary><div class=\"docblock\"><p>Weight: see <code>begin_block</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_finalize\" class=\"method trait-impl\"><a href=\"#method.on_finalize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_finalize</a>(_n: BlockNumber)</h4></section></summary><div class='docblock'>Block finalization hook. This is called at the very end of block execution. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_idle\" class=\"method trait-impl\"><a href=\"#method.on_idle\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_idle</a>(_n: BlockNumber, _remaining_weight: Weight) -&gt; Weight</h4></section></summary><div class='docblock'>Hook to consume a blockโs idle time. This will run when the block is being finalized (before\n[<code>Hooks::on_finalize</code>]). <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_poll\" class=\"method trait-impl\"><a href=\"#method.on_poll\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_poll</a>(_n: BlockNumber, _weight: &amp;mut WeightMeter)</h4></section></summary><div class='docblock'>A hook to run logic after inherent application. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class='docblock'>Hook executed when a code change (aka. a โruntime upgradeโ) is detected by the FRAME\n<code>Executive</code> pallet. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offchain_worker\" class=\"method trait-impl\"><a href=\"#method.offchain_worker\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">offchain_worker</a>(_n: BlockNumber)</h4></section></summary><div class='docblock'>Implementing this function on a pallet allows you to perform long-running tasks that are\ndispatched as separate threads, and entirely independent of the main blockchain execution. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.integrity_test\" class=\"method trait-impl\"><a href=\"#method.integrity_test\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">integrity_test</a>()</h4></section></summary><div class='docblock'>Check the integrity of this palletโs configuration. <a>Read more</a></div></details></div></details>","Hooks<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntegrityTest-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-IntegrityTest-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; IntegrityTest for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.integrity_test\" class=\"method trait-impl\"><a href=\"#method.integrity_test\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">integrity_test</a>()</h4></section></summary><div class='docblock'>See [<code>Hooks::integrity_test</code>].</div></details></div></details>","IntegrityTest","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OffchainWorker%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OffchainWorker%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OffchainWorker&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.offchain_worker\" class=\"method trait-impl\"><a href=\"#method.offchain_worker\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">offchain_worker</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n)</h4></section></summary><div class='docblock'>This function is being called after every block import (when fully synced). <a>Read more</a></div></details></div></details>","OffchainWorker<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnFinalize%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnFinalize%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnFinalize&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_finalize\" class=\"method trait-impl\"><a href=\"#method.on_finalize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_finalize</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n)</h4></section></summary><div class='docblock'>See [<code>Hooks::on_finalize</code>].</div></details></div></details>","OnFinalize<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnGenesis-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnGenesis-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnGenesis for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_genesis\" class=\"method trait-impl\"><a href=\"#method.on_genesis\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_genesis</a>()</h4></section></summary><div class='docblock'>Something that should happen at genesis.</div></details></div></details>","OnGenesis","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnIdle%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnIdle%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnIdle&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_idle\" class=\"method trait-impl\"><a href=\"#method.on_idle\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_idle</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n    remaining_weight: Weight,\n) -&gt; Weight</h4></section></summary><div class='docblock'>See [<code>Hooks::on_idle</code>].</div></details></div></details>","OnIdle<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnInitialize%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnInitialize%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnInitialize&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_initialize\" class=\"method trait-impl\"><a href=\"#method.on_initialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_initialize</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n) -&gt; Weight</h4></section></summary><div class='docblock'>See [<code>Hooks::on_initialize</code>].</div></details></div></details>","OnInitialize<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnPoll%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnPoll%3C%3C%3C%3CT+as+Config%3E::Block+as+HeaderProvider%3E::HeaderT+as+Header%3E::Number%3E-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnPoll&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number&gt; for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_poll\" class=\"method trait-impl\"><a href=\"#method.on_poll\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_poll</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n    weight: &amp;mut WeightMeter,\n)</h4></section></summary><div class='docblock'>Code to execute every now and then at the beginning of the block after inherent application. <a>Read more</a></div></details></div></details>","OnPoll<<<<T as Config>::Block as HeaderProvider>::HeaderT as Header>::Number>","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OnRuntimeUpgrade-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-OnRuntimeUpgrade-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; OnRuntimeUpgrade for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_runtime_upgrade\" class=\"method trait-impl\"><a href=\"#method.on_runtime_upgrade\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">on_runtime_upgrade</a>() -&gt; Weight</h4></section></summary><div class='docblock'>See [<code>Hooks::on_runtime_upgrade</code>].</div></details></div></details>","OnRuntimeUpgrade","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.backing_for\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">backing_for</a>(\n    proposal: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;</h4></section></summary><div class=\"docblock\"><p>Get the amount locked in support of <code>proposal</code>; <code>None</code> if proposal isnโt a valid proposal\nindex.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.maturing_referenda_at\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">maturing_referenda_at</a>(\n    n: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>, ReferendumStatus&lt;&lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number, Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;)&gt;</h4></section></summary><div class=\"docblock\"><p>Get all referenda ready for tally at block <code>n</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.internal_start_referendum\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">internal_start_referendum</a>(\n    proposal: Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;,\n    threshold: VoteThreshold,\n    delay: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Start a referendum.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.internal_cancel_referendum\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">internal_cancel_referendum</a>(ref_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class=\"docblock\"><p>Remove a referendum.</p>\n</div></details></div></details>",0,"shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.propose\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">propose</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal: Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;,\n    value: &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Propose a sensitive action to be taken.</p>\n<p>The dispatch origin of this call must be <em>Signed</em> and the sender must\nhave funds to cover the deposit.</p>\n<ul>\n<li><code>proposal_hash</code>: The hash of the proposal preimage.</li>\n<li><code>value</code>: The amount of deposit (must be at least <code>MinimumDeposit</code>).</li>\n</ul>\n<p>Emits <code>Proposed</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.second\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">second</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Signals agreement with a particular proposal.</p>\n<p>The dispatch origin of this call must be <em>Signed</em> and the sender\nmust have funds to cover the deposit, equal to the original deposit.</p>\n<ul>\n<li><code>proposal</code>: The index of the proposal to second.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.vote\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">vote</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    ref_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n    vote: AccountVote&lt;&lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Vote in a referendum. If <code>vote.is_aye()</code>, the vote is to enact the proposal;\notherwise it is a vote to keep the status quo.</p>\n<p>The dispatch origin of this call must be <em>Signed</em>.</p>\n<ul>\n<li><code>ref_index</code>: The index of the referendum to vote for.</li>\n<li><code>vote</code>: The vote configuration.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.emergency_cancel\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">emergency_cancel</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    ref_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule an emergency cancellation of a referendum. Cannot happen twice to the same\nreferendum.</p>\n<p>The dispatch origin of this call must be <code>CancellationOrigin</code>.</p>\n<p>-<code>ref_index</code>: The index of the referendum to cancel.</p>\n<p>Weight: <code>O(1)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.external_propose\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">external_propose</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal: Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule a referendum to be tabled once it is legal to schedule an external\nreferendum.</p>\n<p>The dispatch origin of this call must be <code>ExternalOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The preimage hash of the proposal.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.external_propose_majority\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">external_propose_majority</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal: Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule a majority-carries referendum to be tabled next once it is legal to schedule\nan external referendum.</p>\n<p>The dispatch of this call must be <code>ExternalMajorityOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The preimage hash of the proposal.</li>\n</ul>\n<p>Unlike <code>external_propose</code>, blacklisting has no effect on this and it may replace a\npre-scheduled <code>external_propose</code> call.</p>\n<p>Weight: <code>O(1)</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.external_propose_default\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">external_propose_default</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal: Bounded&lt;&lt;T as Config&gt;::RuntimeCall, &lt;T as Config&gt;::Hashing&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule a negative-turnout-bias referendum to be tabled next once it is legal to\nschedule an external referendum.</p>\n<p>The dispatch of this call must be <code>ExternalDefaultOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The preimage hash of the proposal.</li>\n</ul>\n<p>Unlike <code>external_propose</code>, blacklisting has no effect on this and it may replace a\npre-scheduled <code>external_propose</code> call.</p>\n<p>Weight: <code>O(1)</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fast_track\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fast_track</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal_hash: &lt;T as Config&gt;::Hash,\n    voting_period: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n    delay: &lt;&lt;&lt;T as Config&gt;::Block as HeaderProvider&gt;::HeaderT as Header&gt;::Number,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule the currently externally-proposed majority-carries referendum to be tabled\nimmediately. If there is no externally-proposed referendum currently, or if there is one\nbut it is not a majority-carries referendum then it fails.</p>\n<p>The dispatch of this call must be <code>FastTrackOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The hash of the current external proposal.</li>\n<li><code>voting_period</code>: The period that is allowed for voting on this proposal. Increased to\nMust be always greater than zero.\nFor <code>FastTrackOrigin</code> must be equal or greater than <code>FastTrackVotingPeriod</code>.</li>\n<li><code>delay</code>: The number of block after voting has ended in approval and this should be\nenacted. This doesnโt have a minimum amount.</li>\n</ul>\n<p>Emits <code>Started</code>.</p>\n<p>Weight: <code>O(1)</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.veto_external\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">veto_external</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal_hash: &lt;T as Config&gt;::Hash,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Veto and blacklist the external proposal hash.</p>\n<p>The dispatch origin of this call must be <code>VetoOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The preimage hash of the proposal to veto and blacklist.</li>\n</ul>\n<p>Emits <code>Vetoed</code>.</p>\n<p>Weight: <code>O(V + log(V))</code> where V is number of <code>existing vetoers</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cancel_referendum\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">cancel_referendum</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    ref_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Remove a referendum.</p>\n<p>The dispatch origin of this call must be <em>Root</em>.</p>\n<ul>\n<li><code>ref_index</code>: The index of the referendum to cancel.</li>\n</ul>\n<h5 id=\"weight-o1\"><a class=\"doc-anchor\" href=\"#weight-o1\">ยง</a>Weight: <code>O(1)</code>.</h5></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.delegate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">delegate</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    to: &lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source,\n    conviction: Conviction,\n    balance: &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;PostDispatchInfo, DispatchErrorWithPostInfo&lt;PostDispatchInfo&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Delegate the voting power (with some given conviction) of the sending account.</p>\n<p>The balance delegated is locked for as long as itโs delegated, and thereafter for the\ntime appropriate for the convictionโs lock period.</p>\n<p>The dispatch origin of this call must be <em>Signed</em>, and the signing account must either:</p>\n<ul>\n<li>\n<p>be delegating already; or</p>\n</li>\n<li>\n<p>have no voting activity (if there is, then it will need to be removed/consolidated\nthrough <code>reap_vote</code> or <code>unvote</code>).</p>\n</li>\n<li>\n<p><code>to</code>: The account whose voting the <code>target</code> accountโs voting power will follow.</p>\n</li>\n<li>\n<p><code>conviction</code>: The conviction that will be attached to the delegated votes. When the\naccount is undelegated, the funds will be locked for the corresponding period.</p>\n</li>\n<li>\n<p><code>balance</code>: The amount of the accountโs balance to be used in delegating. This must not\nbe more than the accountโs current balance.</p>\n</li>\n</ul>\n<p>Emits <code>Delegated</code>.</p>\n<p>Weight: <code>O(R)</code> where R is the number of referendums the voter delegating to has\nvoted on. Weight is charged as if maximum votes.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.undelegate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">undelegate</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;PostDispatchInfo, DispatchErrorWithPostInfo&lt;PostDispatchInfo&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Undelegate the voting power of the sending account.</p>\n<p>Tokens may be unlocked following once an amount of time consistent with the lock period\nof the conviction with which the delegation was issued.</p>\n<p>The dispatch origin of this call must be <em>Signed</em> and the signing account must be\ncurrently delegating.</p>\n<p>Emits <code>Undelegated</code>.</p>\n<p>Weight: <code>O(R)</code> where R is the number of referendums the voter delegating to has\nvoted on. Weight is charged as if maximum votes.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear_public_proposals\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear_public_proposals</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Clears all public proposals.</p>\n<p>The dispatch origin of this call must be <em>Root</em>.</p>\n<p>Weight: <code>O(1)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unlock\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">unlock</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    target: &lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Unlock tokens that have an expired lock.</p>\n<p>The dispatch origin of this call must be <em>Signed</em>.</p>\n<ul>\n<li><code>target</code>: The account to remove the lock on.</li>\n</ul>\n<p>Weight: <code>O(R)</code> with R number of vote of target.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_vote\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_vote</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Remove a vote for a referendum.</p>\n<p>If:</p>\n<ul>\n<li>the referendum was cancelled, or</li>\n<li>the referendum is ongoing, or</li>\n<li>the referendum has ended such that\n<ul>\n<li>the vote of the account was in opposition to the result; or</li>\n<li>there was no conviction to the accountโs vote; or</li>\n<li>the account made a split vote\nโฆthen the vote is removed cleanly and a following call to <code>unlock</code> may result in more\nfunds being available.</li>\n</ul>\n</li>\n</ul>\n<p>If, however, the referendum has ended and:</p>\n<ul>\n<li>it finished corresponding to the vote of the account, and</li>\n<li>the account made a standard vote with conviction, and</li>\n<li>the lock period of the conviction is not over\nโฆthen the lock will be aggregated into the overall accountโs lock, which may involve\n<em>overlocking</em> (where the two locks are combined into a single lock that is the maximum\nof both the amount locked and the time is it locked for).</li>\n</ul>\n<p>The dispatch origin of this call must be <em>Signed</em>, and the signer must have a vote\nregistered for referendum <code>index</code>.</p>\n<ul>\n<li><code>index</code>: The index of referendum of the vote to be removed.</li>\n</ul>\n<p>Weight: <code>O(R + log R)</code> where R is the number of referenda that <code>target</code> has voted on.\nWeight is calculated for the maximum number of vote.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_other_vote\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_other_vote</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    target: &lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source,\n    index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Remove a vote for a referendum.</p>\n<p>If the <code>target</code> is equal to the signer, then this function is exactly equivalent to\n<code>remove_vote</code>. If not equal to the signer, then the vote must have expired,\neither because the referendum was cancelled, because the voter lost the referendum or\nbecause the conviction period is over.</p>\n<p>The dispatch origin of this call must be <em>Signed</em>.</p>\n<ul>\n<li><code>target</code>: The account of the vote to be removed; this account must have voted for\nreferendum <code>index</code>.</li>\n<li><code>index</code>: The index of referendum of the vote to be removed.</li>\n</ul>\n<p>Weight: <code>O(R + log R)</code> where R is the number of referenda that <code>target</code> has voted on.\nWeight is calculated for the maximum number of vote.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.blacklist\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">blacklist</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    proposal_hash: &lt;T as Config&gt;::Hash,\n    maybe_ref_index: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Permanently place a proposal into the blacklist. This prevents it from ever being\nproposed again.</p>\n<p>If called on a queued public or external proposal, then this will result in it being\nremoved. If the <code>ref_index</code> supplied is an active referendum with the proposal hash,\nthen it will be cancelled.</p>\n<p>The dispatch origin of this call must be <code>BlacklistOrigin</code>.</p>\n<ul>\n<li><code>proposal_hash</code>: The proposal hash to blacklist permanently.</li>\n<li><code>ref_index</code>: An ongoing referendum whose hash is <code>proposal_hash</code>, which will be\ncancelled.</li>\n</ul>\n<p>Weight: <code>O(p)</code> (though as this is an high-privilege dispatch, we assume it has a\nreasonable value).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cancel_proposal\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">cancel_proposal</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    prop_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Remove a proposal.</p>\n<p>The dispatch origin of this call must be <code>CancelProposalOrigin</code>.</p>\n<ul>\n<li><code>prop_index</code>: The index of the proposal to cancel.</li>\n</ul>\n<p>Weight: <code>O(p)</code> where <code>p = PublicProps::&lt;T&gt;::decode_len()</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_metadata\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_metadata</a>(\n    origin: &lt;T as Config&gt;::RuntimeOrigin,\n    owner: MetadataOwner,\n    maybe_hash: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;T as Config&gt;::Hash&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class=\"docblock\"><p>Set or clear a metadata of a proposal or a referendum.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>origin</code>: Must correspond to the <code>MetadataOwner</code>.\n<ul>\n<li><code>ExternalOrigin</code> for an external proposal with the <code>SuperMajorityApprove</code>\nthreshold.</li>\n<li><code>ExternalDefaultOrigin</code> for an external proposal with the <code>SuperMajorityAgainst</code>\nthreshold.</li>\n<li><code>ExternalMajorityOrigin</code> for an external proposal with the <code>SimpleMajority</code>\nthreshold.</li>\n<li><code>Signed</code> by a creator for a public proposal.</li>\n<li><code>Signed</code> to clear a metadata for a finished referendum.</li>\n<li><code>Root</code> to set a metadata for an ongoing referendum.</li>\n</ul>\n</li>\n<li><code>owner</code>: an identifier of a metadata owner.</li>\n<li><code>maybe_hash</code>: The hash of an on-chain stored preimage. <code>None</code> to clear a metadata.</li>\n</ul>\n</div></details></div></details>",0,"shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PalletInfoAccess-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-PalletInfoAccess-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; PalletInfoAccess for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">index</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Index of the pallet as configured in the runtime.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.name\" class=\"method trait-impl\"><a href=\"#method.name\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">name</a>() -&gt; &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Name of the pallet as configured in the runtime.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.name_hash\" class=\"method trait-impl\"><a href=\"#method.name_hash\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">name_hash</a>() -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">16</a>]</h4></section></summary><div class='docblock'>Two128 hash of name.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.module_name\" class=\"method trait-impl\"><a href=\"#method.module_name\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">module_name</a>() -&gt; &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Name of the Rust module containing the pallet.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.crate_version\" class=\"method trait-impl\"><a href=\"#method.crate_version\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">crate_version</a>() -&gt; CrateVersion</h4></section></summary><div class='docblock'>Version of the crate containing the pallet.</div></details></div></details>","PalletInfoAccess","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PalletsInfoAccess-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-PalletsInfoAccess-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; PalletsInfoAccess for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.count\" class=\"method trait-impl\"><a href=\"#method.count\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">count</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>The number of palletsโ information that this type represents. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.infos\" class=\"method trait-impl\"><a href=\"#method.infos\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">infos</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;PalletInfoData&gt;</h4></section></summary><div class='docblock'>All of the palletsโ information that this type represents.</div></details></div></details>","PalletsInfoAccess","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for Pallet&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Pallet&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StorageInfoTrait-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-StorageInfoTrait-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; StorageInfoTrait for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.storage_info\" class=\"method trait-impl\"><a href=\"#method.storage_info\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">storage_info</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;StorageInfo&gt;</h4></section></div></details>","StorageInfoTrait","shibuya_runtime::Democracy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WhitelistedStorageKeys-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-WhitelistedStorageKeys-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; WhitelistedStorageKeys for Pallet&lt;T&gt;<div class=\"where\">where\n    T: Config,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.whitelisted_storage_keys\" class=\"method trait-impl\"><a href=\"#method.whitelisted_storage_keys\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">whitelisted_storage_keys</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;TrackedStorageKey&gt;</h4></section></summary><div class='docblock'>Returns a <a href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;TrackedStorageKey&gt;</code></a> indicating the storage keys that\nshould be whitelisted during benchmarking. This means that those keys\nwill be excluded from the benchmarking performance calculation.</div></details></div></details>","WhitelistedStorageKeys","shibuya_runtime::Democracy"],["<section id=\"impl-Eq-for-Pallet%3CT%3E\" class=\"impl\"><a href=\"#impl-Eq-for-Pallet%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for Pallet&lt;T&gt;</h3></section>","Eq","shibuya_runtime::Democracy"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()