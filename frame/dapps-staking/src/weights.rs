
//! Autogenerated weights for `pallet_dapps_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-10-07, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_staking.
pub trait WeightInfo {
    fn register() -> Weight;
    /// n - number of existing stakers on the contract
    fn unregister(n: u32) -> Weight;
    fn enable_developer_pre_approval() -> Weight;
    fn developer_pre_approval() -> Weight;
    /// n - number of existing stakers on the contract
    fn bond_and_stake(n: u32) -> Weight;
    /// n - number of existing stakers on the contract
    fn unbond_unstake_and_withdraw(n: u32) -> Weight;
    /// n - total number of payees
    /// m - number of era staking points
    fn claim(n: u32, m: u32) -> Weight;
    fn force_new_era() -> Weight;
}

/// Weights for pallet_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: DappsStaking RegisteredDevelopers (r:1 w:1)
	// Storage: DappsStaking RegisteredDapps (r:1 w:1)
	// Storage: DappsStaking PreApprovalIsEnabled (r:1 w:0)
	fn register() -> Weight {
		(70_863_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: DappsStaking RegisteredDevelopers (r:1 w:1)
	// Storage: DappsStaking CurrentEra (r:1 w:0)
	// Storage: DappsStaking ContractLastClaimed (r:1 w:1)
	// Storage: DappsStaking ContractEraStake (r:1 w:0)
	// Storage: DappsStaking EraRewardsAndStakes (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: DappsStaking RegisteredDapps (r:0 w:1)
	// Storage: DappsStaking ContractLastStaked (r:0 w:1)
	// Storage: DappsStaking Ledger (r:6 w:6)
	// Storage: Balances Locks (r:6 w:6)
	// Storage: DappsStaking RewardsClaimed (r:0 w:6)
	fn unregister(n: u32, ) -> Weight {
		(164_332_000 as Weight)
			// Standard Error: 372_000
			.saturating_add((44_339_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: DappsStaking PreApprovalIsEnabled (r:0 w:1)
	fn enable_developer_pre_approval() -> Weight {
		(2_962_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: DappsStaking PreApprovedDevelopers (r:1 w:1)
	fn developer_pre_approval() -> Weight {
		(9_133_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Storage: DappsStaking ContractLastStaked (r:1 w:1)
	// Storage: DappsStaking CurrentEra (r:1 w:0)
	// Storage: DappsStaking EraRewardsAndStakes (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: DappsStaking ContractLastClaimed (r:0 w:1)
	// Storage: DappsStaking ContractEraStake (r:0 w:1)
	fn bond_and_stake(n: u32, ) -> Weight {
		(104_490_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((828_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Storage: DappsStaking ContractLastStaked (r:1 w:1)
	// Storage: DappsStaking ContractEraStake (r:1 w:1)
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: DappsStaking CurrentEra (r:1 w:0)
	// Storage: DappsStaking EraRewardsAndStakes (r:1 w:1)
	// Storage: DappsStaking RewardsClaimed (r:0 w:1)
	fn unbond_unstake_and_withdraw(n: u32, ) -> Weight {
		(120_760_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((740_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Storage: DappsStaking ContractLastStaked (r:1 w:1)
	// Storage: DappsStaking CurrentEra (r:1 w:0)
	// Storage: DappsStaking ContractLastClaimed (r:1 w:1)
	// Storage: DappsStaking HistoryDepth (r:1 w:0)
	// Storage: DappsStaking ContractEraStake (r:1 w:2)
	// Storage: DappsStaking EraRewardsAndStakes (r:60 w:0)
	// Storage: DappsStaking RewardsClaimed (r:2 w:2)
	fn claim(n: u32, m: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 268_000
			.saturating_add((17_964_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 538_000
			.saturating_add((15_901_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(n as Weight)))
	}
    fn force_new_era() -> Weight {
        T::DbWeight::get().writes(1 as Weight)
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: DappsStaking RegisteredDevelopers (r:1 w:1)
	// Storage: DappsStaking RegisteredDapps (r:1 w:1)
	// Storage: DappsStaking PreApprovalIsEnabled (r:1 w:0)
	fn register() -> Weight {
		(70_863_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: DappsStaking RegisteredDevelopers (r:1 w:1)
	// Storage: DappsStaking CurrentEra (r:1 w:0)
	// Storage: DappsStaking ContractLastClaimed (r:1 w:1)
	// Storage: DappsStaking ContractEraStake (r:1 w:0)
	// Storage: DappsStaking EraRewardsAndStakes (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: DappsStaking RegisteredDapps (r:0 w:1)
	// Storage: DappsStaking ContractLastStaked (r:0 w:1)
	// Storage: DappsStaking Ledger (r:6 w:6)
	// Storage: Balances Locks (r:6 w:6)
	// Storage: DappsStaking RewardsClaimed (r:0 w:6)
	fn unregister(n: u32, ) -> Weight {
		(164_332_000 as Weight)
			// Standard Error: 372_000
			.saturating_add((44_339_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((3 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes((4 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: DappsStaking PreApprovalIsEnabled (r:0 w:1)
	fn enable_developer_pre_approval() -> Weight {
		(2_962_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: DappsStaking PreApprovedDevelopers (r:1 w:1)
	fn developer_pre_approval() -> Weight {
		(9_133_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Storage: DappsStaking ContractLastStaked (r:1 w:1)
	// Storage: DappsStaking CurrentEra (r:1 w:0)
	// Storage: DappsStaking EraRewardsAndStakes (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: DappsStaking ContractLastClaimed (r:0 w:1)
	// Storage: DappsStaking ContractEraStake (r:0 w:1)
	fn bond_and_stake(n: u32, ) -> Weight {
		(104_490_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((828_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Storage: DappsStaking ContractLastStaked (r:1 w:1)
	// Storage: DappsStaking ContractEraStake (r:1 w:1)
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: DappsStaking CurrentEra (r:1 w:0)
	// Storage: DappsStaking EraRewardsAndStakes (r:1 w:1)
	// Storage: DappsStaking RewardsClaimed (r:0 w:1)
	fn unbond_unstake_and_withdraw(n: u32, ) -> Weight {
		(120_760_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((740_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Storage: DappsStaking ContractLastStaked (r:1 w:1)
	// Storage: DappsStaking CurrentEra (r:1 w:0)
	// Storage: DappsStaking ContractLastClaimed (r:1 w:1)
	// Storage: DappsStaking HistoryDepth (r:1 w:0)
	// Storage: DappsStaking ContractEraStake (r:1 w:2)
	// Storage: DappsStaking EraRewardsAndStakes (r:60 w:0)
	// Storage: DappsStaking RewardsClaimed (r:2 w:2)
	fn claim(n: u32, m: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 268_000
			.saturating_add((17_964_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 538_000
			.saturating_add((15_901_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(m as Weight)))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(n as Weight)))
	}
    fn force_new_era() -> Weight {
        RocksDbWeight::get().writes(1 as Weight)
    }
}
