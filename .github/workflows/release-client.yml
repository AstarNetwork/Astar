name: Release Client Build
on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  workflow_dispatch:
jobs:
  checks-and-tests:
    runs-on: [self-hosted, Linux, X64]
    steps:
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: Checkout the source code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install deps
        run: sudo apt -y install protobuf-compiler

      - name: Install & display rust toolchain
        run: rustup show

      - name: Check targets are installed correctly
        run: rustup target list --installed

      - name: Install cargo-nextest
        run: curl -LsSf https://get.nexte.st/latest/linux | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin

      - name: Check all features compilation
        run: cargo check --features try-runtime,runtime-benchmarks --locked

      - name: Run all tests
        run: make test-all

  native-linux:
    needs: checks-and-tests
    runs-on: [self-hosted, Linux, X64]
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu

    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install deps
        run: sudo apt -y install protobuf-compiler

      - name: aarch64 setup
        if: contains(matrix.target, 'aarch64')
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y gcc-multilib g++-multilib
          sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

          mkdir -p .cargo
          touch .cargo/config
          printf '[target.aarch64-unknown-linux-gnu]\nlinker = "aarch64-linux-gnu-gcc"' >> .cargo/config

      - name: x86_64 setup
        if: contains(matrix.target, 'x86_64')
        run: |
          mkdir -p .cargo
          touch .cargo/config
          printf '[target.x86_64-unknown-linux-gnu]\nrustflags = ["-Clink-arg=-fuse-ld=lld"]' >> .cargo/config

      - name: Install & display rust toolchain
        run: rustup show

      - name: Add aarch64 target
        if: contains(matrix.target, 'aarch64')
        run: rustup target add ${{ matrix.target }}

      - name: Check targets are installed correctly
        run: rustup target list --installed

      - name: Build optimized binary
        run: cargo build --profile production --target ${{ matrix.target }} --locked

      - name: Set artifact name
        env:
          TARGET: ${{ matrix.target }}
        id: artifact-name
        run: echo "name=astar-ubuntu-latest-${TARGET%%-*}" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact-name.outputs.name }}
          path: target/${{ matrix.target }}/production/astar-collator

  native-macos:
    needs: checks-and-tests
    runs-on: macos-latest
    env:
      RUSTC_WRAPPER: "sccache"
      SCCACHE_BUCKET: ${{ secrets.SCCACHE_BUCKET }}
      SCCACHE_REGION: ${{ secrets.SCCACHE_REGION }}
      SCCACHE_S3_KEY_PREFIX: "astar-macos"
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.SCCACHE_ROLE }}
          role-session-name: github_astar_mac
          aws-region: ${{ secrets.SCCACHE_REGION }}

      - name: Install deps
        run: brew install protobuf sccache

      - name: Install & display rust toolchain
        run: rustup show

      - name: Check targets are installed correctly
        run: rustup target list --installed

      - name: Build optimized binary
        run: cargo build --locked --profile production

      - name: Show sccache stats
        run: sccache --show-stats

      - uses: actions/upload-artifact@v3
        with:
          name: astar-macOS-latest-x86_64
          path: target/production/astar-collator

  docker:
    needs: native-linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: staketechnologies/astar-collator
          tag-custom: shiden
          tag-sha: true # add git short SHA as Docker tag

      - name: Download pre-built linux collator binary
        uses: actions/download-artifact@v3
        with:
          name: astar-ubuntu-latest-x86_64

      - name: Make binary executable and copy it to docker folder
        run: chmod +x astar-collator && cp astar-collator third-party/docker

      - name: Build & Push docker image
        uses: docker/build-push-action@v2
        with:
          context: third-party/docker
          platforms: linux/amd64
          labels: ${{ steps.docker_meta.outputs.labels }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          push: true

  publish-release-draft:
    needs: [native-linux, native-macos, docker]
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20.x
        uses: actions/setup-node@v2
        with:
          node-version: 20.x

      - name: Get the latest client release
        id: latest-release
        # We're making an assumption that the latest client release will be within the last 30 releases
        run: |
          latest_client_tag=$(curl -s https://api.github.com/repos/AstarNetwork/Astar/releases | \
           jq -r 'map(select(.name | test("^v\\d+\\.\\d+\\.\\d+$"; "i")))[0] | .tag_name')
          echo "latest_client_tag=$latest_client_tag" >> $GITHUB_OUTPUT

      - name: Generate Release Body
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: generate-release-body
        run: |
          cd .github/scripts
          yarn
          yarn -s run ts-node generate-release-body.ts generate \
            --owner "${{ github.repository_owner }}" \
            --repo "$(basename ${{ github.repository }})" \
            --from "${{ steps.latest-release.outputs.latest_client_tag }}" \
            --to "${{ github.ref_name }}" \
            --type client \
            > ../../body.md

      - name: Create Release Draft
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body_path: body.md
          draft: true

  upload-binaries:
    needs: publish-release-draft
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ["ubuntu", "macOS"]
        arch: ["x86_64", "aarch64"]
        exclude:
          - os: macOS
            arch: aarch64
    steps:
      - name: Create download folder
        run: |
          mkdir -p ${{ matrix.os }}-${{ matrix.arch }}-bin

      - name: Download pre-built collator binary
        uses: actions/download-artifact@v3
        with:
          name: astar-${{ matrix.os }}-latest-${{ matrix.arch }}
          path: ${{ matrix.os }}-${{ matrix.arch }}-bin

      - name: Make binary executable and tar gzip
        run: |
          cd ${{ matrix.os }}-${{ matrix.arch }}-bin
          chmod +x astar-collator
          tar zcvf astar-collator.tar.gz astar-collator

      - name: Upload binary artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-release-draft.outputs.upload_url }}
          asset_path: ${{ matrix.os }}-${{ matrix.arch }}-bin/astar-collator.tar.gz
          asset_name: astar-collator-${{ github.ref_name }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          asset_content_type: application/gzip

  chain-sync-smoke:
    needs: native-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chain: ["astar", "shiden", "shibuya"]

    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4

      - name: Download pre-built collator binary
        uses: actions/download-artifact@v3
        with:
          name: astar-ubuntu-latest-x86_64
          path: target/release

      - name: Sync chain ${{ matrix.chain }}
        run: |
          chmod +x target/release/astar-collator
          ./scripts/sync-smoke.sh ${{ matrix.chain }}

  zombienet-smoke:
    needs: native-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chain: ["astar-dev", "shiden-dev", "shibuya-dev"]

    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4

      - name: Download pre-built collator binary
        uses: actions/download-artifact@v3
        with:
          name: astar-ubuntu-latest-x86_64
          path: third-party/zombienet

      - name: Setup
        run: chmod +x third-party/zombienet/astar-collator

      - name: Setup zombienet
        working-directory: third-party/zombienet
        run: ./setup.sh

      - name: ${{ matrix.chain }} build blocks
        working-directory: third-party/zombienet
        env:
          CHAIN: ${{ matrix.chain }}
        run: zombienet -p native test smoke.zndsl
