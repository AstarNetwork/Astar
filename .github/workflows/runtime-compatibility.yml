name: Runtime Compatibility Test
on:
  workflow_run:
    workflows: ["Release Runtime Build"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Workflow run ID to download artifacts from'
        required: true
        type: string

jobs:
  fetch-client-info:
    # Only run if workflow_run was successful OR if manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      client_tag_1: ${{ steps.parse-releases.outputs.client_tag_1 }}
      client_asset_url_1: ${{ steps.parse-releases.outputs.client_asset_url_1 }}
      client_tag_2: ${{ steps.parse-releases.outputs.client_tag_2 }}
      client_asset_url_2: ${{ steps.parse-releases.outputs.client_asset_url_2 }}
    steps:
      - name: Fetch and parse client releases
        id: parse-releases
        run: |
          RELEASES=$(curl -s https://api.github.com/repos/AstarNetwork/Astar/releases)

          # Get latest 2 client tags (v*.*.* format)
          CLIENT_TAGS_ARRAY=($(echo "$RELEASES" | jq -r '[.[] | select(.tag_name | test("^v\\d+\\.\\d+\\.\\d+$")) | .tag_name] | .[0:2] | .[]'))

          # Get latest client info
          CLIENT_TAG_1="${CLIENT_TAGS_ARRAY[0]}"
          ASSET_NAME_1="astar-collator-${CLIENT_TAG_1}-ubuntu-x86_64.tar.gz"
          CLIENT_ASSET_URL_1=$(curl -s "https://api.github.com/repos/AstarNetwork/Astar/releases/tags/${CLIENT_TAG_1}" | \
          jq -r --arg name "$ASSET_NAME_1" '.assets[] | select(.name == $name) | .browser_download_url')
 
          # Get second latest client info
          CLIENT_TAG_2="${CLIENT_TAGS_ARRAY[1]}"
          ASSET_NAME_2="astar-collator-${CLIENT_TAG_2}-ubuntu-x86_64.tar.gz"
          CLIENT_ASSET_URL_2=$(curl -s "https://api.github.com/repos/AstarNetwork/Astar/releases/tags/${CLIENT_TAG_2}" | \
          jq -r --arg name "$ASSET_NAME_2" '.assets[] | select(.name == $name) | .browser_download_url')
               
          # Output variables
          echo "client_tag_1=${CLIENT_TAG_1}" >> $GITHUB_OUTPUT
          echo "client_asset_url_1=${CLIENT_ASSET_URL_1}" >> $GITHUB_OUTPUT
          echo "client_tag_2=${CLIENT_TAG_2}" >> $GITHUB_OUTPUT
          echo "client_asset_url_2=${CLIENT_ASSET_URL_2}" >> $GITHUB_OUTPUT

          echo "Latest Client Tag: ${CLIENT_TAG_1} -> ${CLIENT_ASSET_URL_1}"
          echo "Second Latest Client Tag: ${CLIENT_TAG_2} -> ${CLIENT_ASSET_URL_2}"

  runtime-compatibility-test:
    needs: fetch-client-info
    # Only run if workflow_run was successful OR if manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        chain: [ "astar", "shiden", "shibuya" ]
        client:
          - tag: ${{ needs.fetch-client-info.outputs.client_tag_1 }}
            asset_url: ${{ needs.fetch-client-info.outputs.client_asset_url_1 }}
          - tag: ${{ needs.fetch-client-info.outputs.client_tag_2 }}
            asset_url: ${{ needs.fetch-client-info.outputs.client_asset_url_2 }}
    env:
      ZOMBIENET_DIR: third-party/zombienet
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4

      - name: Determine workflow run ID
        id: determine-run-id
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RUN_ID="${{ github.event.inputs.run_id }}"
            echo "Provided run ID: ${RUN_ID}"
          else
            RUN_ID="${{ github.event.workflow_run.id }}"
            echo "Using workflow_run event run ID: ${RUN_ID}"
          fi
          echo "run_id=${RUN_ID}" >> $GITHUB_OUTPUT

      - name: Download runtime artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.chain }}-runtime
          path: ${{ env.ZOMBIENET_DIR }}
          run-id: ${{ steps.determine-run-id.outputs.run_id }}
          repository: AstarNetwork/Astar
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download and setup client
        run: |
          echo "Setting up client version: ${{ matrix.client.tag }}"
          curl -L -o astar-collator.tar.gz "${{ matrix.client.asset_url }}"
          tar -xzf astar-collator.tar.gz
          mv astar-collator ${{ env.ZOMBIENET_DIR }}/astar-collator
          chmod +x ${{ env.ZOMBIENET_DIR }}/astar-collator
          rm astar-collator.tar.gz

      - name: Prepare runtime for upgrade test
        working-directory: ${{ env.ZOMBIENET_DIR }}
        run: |
          RUNTIME_FILE=$(find . -maxdepth 1 -name "${{ matrix.chain }}_runtime.compact.compressed.wasm" -print -quit)
          if [ -n "$RUNTIME_FILE" ]; then
            mv "$RUNTIME_FILE" runtime.compact.compressed.wasm
            echo "‚úÖ Renamed runtime: $(basename "$RUNTIME_FILE") ‚Üí runtime.compact.compressed.wasm"
          else
            echo "‚ùå No runtime file found matching pattern '${{ matrix.chain }}_runtime.compact.compressed.wasm'"
            exit 1
          fi

      - name: Setup Zombienet
        working-directory: ${{ env.ZOMBIENET_DIR }}
        run: ./setup.sh

      - name: Run compatibility test
        working-directory: ${{ env.ZOMBIENET_DIR }}
        env:
          CHAIN: ${{ matrix.chain }}-dev
        run: |
          version=$(cat "${{ matrix.chain }}-srtool-digest.json" | jq -r '.version')
          echo "üß™ Testing ${{ matrix.chain }}-runtime v${version} compatibility with client ${{ matrix.client.tag }}"
          zombienet -p native test smoke_runtime_upgrade.zndsl
