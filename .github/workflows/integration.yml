on: [push, workflow_dispatch]

name: Integration

jobs:
  test:
    runs-on: [self-hosted, Linux, X64]
    steps:
    - name: Checkout the source code
      uses: actions/checkout@master
      with:
        submodules: true

    - name: Install & display rust toolchain
      run: rustup show

    - name: Check targets are installed correctly
      run: rustup target list --installed

    - name: Run all tests
      run: cargo test --all-features

  native-linux:
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: [self-hosted, Linux, X64]
    steps:
    - name: Checkout the source code
      uses: actions/checkout@master
      with:
        submodules: true

    - name: Install & display rust toolchain
      run: rustup show

    - name: Check targets are installed correctly
      run: rustup target list --installed

    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          ${{ runner.os }}-cargo

    - name: Build optimized binary
      run: CARGO_PROFILE_RELEASE_LTO=true RUSTFLAGS="-C codegen-units=1" cargo build --release --verbose

    - uses: actions/upload-artifact@master
      with:
        name: astar-ubuntu-latest-x86_64
        path: target/release/astar-collator

  native-macos:
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-latest
    steps:
    - name: Checkout the source code
      uses: actions/checkout@master
      with:
        submodules: true

    - name: Install & display rust toolchain
      run: rustup show

    - name: Check targets are installed correctly
      run: rustup target list --installed

    - name: Build optimized binary
      run: cargo build --release --verbose

    - uses: actions/upload-artifact@master
      with:
        name: astar-macOS-latest-x86_64
        path: target/release/astar-collator

  check-all-features:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the source code
      uses: actions/checkout@master
      with:
        submodules: true

    - name: Install & display rust toolchain
      run: rustup show

    - name: Check targets are installed correctly
      run: rustup target list --installed

    - name: Check all features compilation
      run: cargo check --verbose --all-features

  nix:
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the source code
      uses: actions/checkout@v2
      with:
        submodules: true
    - uses: cachix/install-nix-action@v12
      with:
        nix_path: nixpkgs=channel:nixos-21.11
    - run: nix-shell third-party/nix/shell.nix --run "cargo check --all-features"

  docker:
    needs: native-linux
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: [self-hosted, Linux, X64]
    steps:

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker meta
      id: docker_meta
      uses: crazy-max/ghaction-docker-meta@v1
      with:
        images: staketechnologies/astar-collator
        tag-custom: shiden 
        tag-sha: true # add git short SHA as Docker tag

    - name: Download pre-built linux collator binary
      uses: actions/download-artifact@v3
      with:
        name: astar-ubuntu-latest-x86_64

    - name: Copy binary to docker folder
      run: cp astar-collator third-party/docker

    - name: Build & Push docker image
      uses: docker/build-push-action@v2
      with:
        context: third-party/docker 
        platforms: linux/amd64
        labels: ${{ steps.docker_meta.outputs.labels }}
        tags: ${{ steps.docker_meta.outputs.tags }}
        push: true
