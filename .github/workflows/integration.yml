on: [push]

name: Integration

env:
  RUST_VERSION: 'nightly-2021-11-29'

jobs:
  native:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ env.RUST_VERSION }}
        targets: 'wasm32-unknown-unknown'

    - name: Checkout the source code
      uses: actions/checkout@master
      with:
        submodules: true

    - name: Check targets are installed correctly
      run: rustup target list --installed

    - name: Run all tests
      run: cargo test --all

    - name: Cleanup after tests
      run: cargo clean

    - name: Build optimized binary
      run: cargo build --release --verbose

    - uses: actions/upload-artifact@master
      with:
        name: astar-${{ matrix.os }}-x86_64
        path: target/release/astar-collator

  runtime-benchmarks:
    runs-on: ubuntu-latest
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ env.RUST_VERSION }}
        targets: 'wasm32-unknown-unknown'

    - name: Checkout the source code
      uses: actions/checkout@master
      with:
        submodules: true

    - name: Check targets are installed correctly
      run: rustup target list --installed

    - name: Check runtime-benchmarks compilation
      run: cargo check --verbose --features runtime-benchmarks

  try-runtime:
    runs-on: ubuntu-latest
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ env.RUST_VERSION }}
        targets: 'wasm32-unknown-unknown'

    - name: Checkout the source code
      uses: actions/checkout@master
      with:
        submodules: true

    - name: Check targets are installed correctly
      run: rustup target list --installed

    - name: Check try-runtime compilation
      run: cargo check --verbose --features try-runtime

  nix:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the source code
      uses: actions/checkout@v2
      with:
        submodules: true
    - uses: cachix/install-nix-action@v12
      with:
        nix_path: nixpkgs=channel:nixos-20.09
    - run: nix-shell third-party/nix/shell.nix --run "cargo build --release"

  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ env.RUST_VERSION }}
        targets: 'wasm32-unknown-unknown'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker meta
      id: docker_meta
      uses: crazy-max/ghaction-docker-meta@v1
      with:
        images: staketechnologies/astar-collator
        tag-custom: shiden 
        tag-sha: true # add git short SHA as Docker tag

    - name: Checkout the source code
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Check targets are installed correctly
      run: rustup target list --installed

    - name: Build optimized binary
      run: |
        cargo build --locked --release
        cp target/release/astar-collator third-party/docker

    - name: Build & Push docker image
      uses: docker/build-push-action@v2
      with:
        context: third-party/docker 
        platforms: linux/amd64
        labels: ${{ steps.docker_meta.outputs.labels }}
        tags: ${{ steps.docker_meta.outputs.tags }}
        push: true
