
//! Autogenerated weights for `pallet_dapps_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-10-08, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/astar-collator
// benchmark
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_dapps_staking
// --steps
// 20
// --repeat
// 10
// --extrinsic
// *
// --output
// .


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for pallet_dapps_staking.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_dapps_staking::WeightInfo for WeightInfo<T> {
	// Storage: DappsStaking RegisteredDevelopers (r:1 w:1)
	// Storage: DappsStaking RegisteredDapps (r:1 w:1)
	// Storage: DappsStaking PreApprovalIsEnabled (r:1 w:0)
	fn register() -> Weight {
		(68_157_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: DappsStaking RegisteredDevelopers (r:1 w:1)
	// Storage: DappsStaking CurrentEra (r:1 w:0)
	// Storage: DappsStaking ContractLastClaimed (r:1 w:1)
	// Storage: DappsStaking ContractEraStake (r:1 w:0)
	// Storage: DappsStaking EraRewardsAndStakes (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: DappsStaking RegisteredDapps (r:0 w:1)
	// Storage: DappsStaking ContractLastStaked (r:0 w:1)
	// Storage: DappsStaking Ledger (r:6 w:6)
	// Storage: Balances Locks (r:6 w:6)
	// Storage: DappsStaking RewardsClaimed (r:0 w:6)
	fn unregister(n: u32, ) -> Weight {
		(78_944_000 as Weight)
			// Standard Error: 340_000
			.saturating_add((43_125_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: DappsStaking PreApprovalIsEnabled (r:0 w:1)
	fn enable_developer_pre_approval() -> Weight {
		(3_046_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: DappsStaking PreApprovedDevelopers (r:1 w:1)
	fn developer_pre_approval() -> Weight {
		(8_810_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Storage: DappsStaking ContractLastStaked (r:1 w:1)
	// Storage: DappsStaking CurrentEra (r:1 w:0)
	// Storage: DappsStaking EraRewardsAndStakes (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: DappsStaking ContractLastClaimed (r:0 w:1)
	// Storage: DappsStaking ContractEraStake (r:0 w:1)
	fn bond_and_stake(n: u32, ) -> Weight {
		(105_992_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((698_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Storage: DappsStaking ContractLastStaked (r:1 w:1)
	// Storage: DappsStaking ContractEraStake (r:1 w:1)
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: DappsStaking CurrentEra (r:1 w:0)
	// Storage: DappsStaking EraRewardsAndStakes (r:1 w:1)
	// Storage: DappsStaking RewardsClaimed (r:0 w:1)
	fn unbond_unstake_and_withdraw(n: u32, ) -> Weight {
		(115_838_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((677_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Storage: DappsStaking ContractLastStaked (r:1 w:1)
	// Storage: DappsStaking CurrentEra (r:1 w:0)
	// Storage: DappsStaking ContractLastClaimed (r:1 w:1)
	// Storage: DappsStaking HistoryDepth (r:1 w:0)
	// Storage: DappsStaking ContractEraStake (r:1 w:2)
	// Storage: DappsStaking EraRewardsAndStakes (r:60 w:0)
	// Storage: DappsStaking RewardsClaimed (r:2 w:2)
	fn claim(n: u32, m: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 206_000
			.saturating_add((17_157_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 415_000
			.saturating_add((14_569_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: DappsStaking ForceEra (r:0 w:1)
	fn force_new_era() -> Weight {
		(3_152_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}
