
// This file is part of Astar.

// Copyright (C) 2019-2023 Stake Technologies Pte.Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// Astar is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Astar is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Astar. If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_dapp_staking_v3
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `devserver-01`, CPU: `Intel(R) Xeon(R) E-2236 CPU @ 3.40GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("shibuya-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/astar-collator
// benchmark
// pallet
// --chain=shibuya-dev
// --steps=50
// --repeat=20
// --pallet=pallet_dapp_staking_v3
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./benchmark-results/shibuya-dev/dapp_staking_v3_weights.rs
// --template=./scripts/templates/weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;
use pallet_dapp_staking_v3::WeightInfo;

/// Weights for pallet_dapp_staking_v3 using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn maintenance_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 0)
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:1)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(116), added: 2096, mode: MaxEncodedLen)
	/// Storage: DappStaking CounterForIntegratedDApps (r:1 w:1)
	/// Proof: DappStaking CounterForIntegratedDApps (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: DappStaking NextDAppId (r:1 w:1)
	/// Proof: DappStaking NextDAppId (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3086`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(25_000_000, 3086)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:1)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(116), added: 2096, mode: MaxEncodedLen)
	fn set_dapp_reward_beneficiary() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `74`
		//  Estimated: `3086`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(16_000_000, 3086)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:1)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(116), added: 2096, mode: MaxEncodedLen)
	fn set_dapp_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `74`
		//  Estimated: `3086`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(15_000_000, 3086)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:1)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(116), added: 2096, mode: MaxEncodedLen)
	/// Storage: DappStaking CounterForIntegratedDApps (r:1 w:1)
	/// Proof: DappStaking CounterForIntegratedDApps (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: DappStaking ContractStake (r:0 w:1)
	/// Proof: DappStaking ContractStake (max_values: Some(65535), max_size: Some(91), added: 2071, mode: MaxEncodedLen)
	fn unregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `74`
		//  Estimated: `3086`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(22_000_000, 3086)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(310), added: 2785, mode: MaxEncodedLen)
	/// Storage: CollatorSelection Candidates (r:1 w:0)
	/// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Balances Freezes (r:1 w:1)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(67), added: 2542, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:0)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	fn lock_new_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `138`
		//  Estimated: `4764`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(43_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(310), added: 2785, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:1)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(67), added: 2542, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:0)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	fn lock_existing_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `156`
		//  Estimated: `4764`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(43_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(310), added: 2785, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:1)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(67), added: 2542, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:0)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `156`
		//  Estimated: `4764`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(41_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(310), added: 2785, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:1)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(67), added: 2542, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:0)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 8]`.
	fn claim_unlocked(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `186`
		//  Estimated: `4764`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(40_400_000, 4764)
			// Standard Error: 616_441
			.saturating_add(Weight::from_parts(1_300_000, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(310), added: 2785, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:1)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(67), added: 2542, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:0)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	fn relock_unlocking() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `4764`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(38_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:0)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(116), added: 2096, mode: MaxEncodedLen)
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(310), added: 2785, mode: MaxEncodedLen)
	/// Storage: DappStaking StakerInfo (r:1 w:1)
	/// Proof: DappStaking StakerInfo (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: DappStaking ContractStake (r:1 w:1)
	/// Proof: DappStaking ContractStake (max_values: Some(65535), max_size: Some(91), added: 2071, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:1)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(67), added: 2542, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:0)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	fn stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `249`
		//  Estimated: `4764`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(50_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:0)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(116), added: 2096, mode: MaxEncodedLen)
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(310), added: 2785, mode: MaxEncodedLen)
	/// Storage: DappStaking StakerInfo (r:1 w:1)
	/// Proof: DappStaking StakerInfo (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: DappStaking ContractStake (r:1 w:1)
	/// Proof: DappStaking ContractStake (max_values: Some(65535), max_size: Some(91), added: 2071, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:1)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(67), added: 2542, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:0)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	fn unstake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `426`
		//  Estimated: `4764`
		// Minimum execution time: 54_000_000 picoseconds.
		Weight::from_parts(54_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(310), added: 2785, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:0)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(789), added: 3264, mode: MaxEncodedLen)
	/// Storage: DappStaking PeriodEnd (r:1 w:0)
	/// Proof: DappStaking PeriodEnd (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:1)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(67), added: 2542, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:0)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 16]`.
	fn claim_staker_rewards_past_period(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `522`
		//  Estimated: `4764`
		// Minimum execution time: 61_000_000 picoseconds.
		Weight::from_parts(55_805_248, 4764)
			// Standard Error: 284_158
			.saturating_add(Weight::from_parts(4_609_116, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(310), added: 2785, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:0)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(789), added: 3264, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:1)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(67), added: 2542, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:0)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 16]`.
	fn claim_staker_rewards_ongoing_period(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `501`
		//  Estimated: `4764`
		// Minimum execution time: 60_000_000 picoseconds.
		Weight::from_parts(54_186_464, 4764)
			// Standard Error: 118_535
			.saturating_add(Weight::from_parts(4_587_016, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: DappStaking StakerInfo (r:1 w:1)
	/// Proof: DappStaking StakerInfo (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: DappStaking PeriodEnd (r:1 w:0)
	/// Proof: DappStaking PeriodEnd (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(310), added: 2785, mode: MaxEncodedLen)
	fn claim_bonus_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `267`
		//  Estimated: `3775`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(46_000_000, 3775)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:0)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(116), added: 2096, mode: MaxEncodedLen)
	/// Storage: DappStaking DAppTiers (r:1 w:1)
	/// Proof: DappStaking DAppTiers (max_values: None, max_size: Some(1583), added: 4058, mode: MaxEncodedLen)
	fn claim_dapp_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2584`
		//  Estimated: `5048`
		// Minimum execution time: 90_000_000 picoseconds.
		Weight::from_parts(90_000_000, 5048)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:0)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(116), added: 2096, mode: MaxEncodedLen)
	/// Storage: DappStaking StakerInfo (r:1 w:1)
	/// Proof: DappStaking StakerInfo (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(310), added: 2785, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:1)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(67), added: 2542, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:0)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	fn unstake_from_unregistered() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `313`
		//  Estimated: `4764`
		// Minimum execution time: 64_000_000 picoseconds.
		Weight::from_parts(64_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: DappStaking StakerInfo (r:9 w:8)
	/// Proof: DappStaking StakerInfo (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(310), added: 2785, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:1)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(67), added: 2542, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:0)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 8]`.
	fn cleanup_expired_entries(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `250 + x * (69 ±0)`
		//  Estimated: `4764 + x * (2613 ±0)`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(48_774_390, 4764)
			// Standard Error: 2_201_253
			.saturating_add(Weight::from_parts(6_006_097, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2613).saturating_mul(x.into()))
	}
	fn force() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(18_000_000, 0)
	}
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:1)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(789), added: 3264, mode: MaxEncodedLen)
	fn on_initialize_voting_to_build_and_earn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16`
		//  Estimated: `4254`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(29_000_000, 4254)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: DappStaking StaticTierParams (r:1 w:0)
	/// Proof: DappStaking StaticTierParams (max_values: Some(1), max_size: Some(167), added: 662, mode: MaxEncodedLen)
	/// Storage: DappStaking TierConfig (r:1 w:1)
	/// Proof: DappStaking TierConfig (max_values: Some(1), max_size: Some(161), added: 656, mode: MaxEncodedLen)
	/// Storage: DappStaking PeriodEnd (r:1 w:2)
	/// Proof: DappStaking PeriodEnd (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: DappStaking HistoryCleanupMarker (r:1 w:1)
	/// Proof: DappStaking HistoryCleanupMarker (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:1)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(789), added: 3264, mode: MaxEncodedLen)
	/// Storage: DappStaking DAppTiers (r:0 w:1)
	/// Proof: DappStaking DAppTiers (max_values: None, max_size: Some(1583), added: 4058, mode: MaxEncodedLen)
	fn on_initialize_build_and_earn_to_voting() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `627`
		//  Estimated: `4254`
		// Minimum execution time: 74_000_000 picoseconds.
		Weight::from_parts(74_000_000, 4254)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:1)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(789), added: 3264, mode: MaxEncodedLen)
	/// Storage: DappStaking DAppTiers (r:0 w:1)
	/// Proof: DappStaking DAppTiers (max_values: None, max_size: Some(1583), added: 4058, mode: MaxEncodedLen)
	fn on_initialize_build_and_earn_to_build_and_earn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `68`
		//  Estimated: `4254`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(37_000_000, 4254)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking ContractStake (r:101 w:0)
	/// Proof: DappStaking ContractStake (max_values: Some(65535), max_size: Some(91), added: 2071, mode: MaxEncodedLen)
	/// Storage: DappStaking TierConfig (r:1 w:0)
	/// Proof: DappStaking TierConfig (max_values: Some(1), max_size: Some(161), added: 656, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 100]`.
	fn dapp_tier_assignment(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `149 + x * (32 ±0)`
		//  Estimated: `3061 + x * (2071 ±0)`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(6_000_000, 3061)
			// Standard Error: 187_047
			.saturating_add(Weight::from_parts(3_240_000, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2071).saturating_mul(x.into()))
	}
	/// Storage: DappStaking HistoryCleanupMarker (r:1 w:1)
	/// Proof: DappStaking HistoryCleanupMarker (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:1)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(789), added: 3264, mode: MaxEncodedLen)
	/// Storage: DappStaking DAppTiers (r:0 w:1)
	/// Proof: DappStaking DAppTiers (max_values: None, max_size: Some(1583), added: 4058, mode: MaxEncodedLen)
	fn on_idle_cleanup() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293`
		//  Estimated: `4254`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_000_000, 4254)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}
