
// This file is part of Astar.

// Copyright (C) Stake Technologies Pte.Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// Astar is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Astar is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Astar. If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_inflation`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-09-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `gh-runner-01-ovh`, CPU: `Intel(R) Xeon(R) E-2236 CPU @ 3.40GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=./target/release/wbuild/shiden-runtime/shiden_runtime.compact.compressed.wasm
// --steps=50
// --repeat=20
// --pallet=pallet_inflation
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./benchmark-results/shiden/runtime/inflation_weights.rs
// --template=./scripts/templates/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(dead_code)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_inflation`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_inflation::WeightInfo for SubstrateWeight<T> {
	/// Storage: `Inflation::InflationParams` (r:0 w:1)
	/// Proof: `Inflation::InflationParams` (`max_values`: Some(1), `max_size`: Some(72), added: 567, mode: `MaxEncodedLen`)
	fn force_set_inflation_params() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_705_000 picoseconds.
		Weight::from_parts(7_876_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Inflation::InflationParams` (r:1 w:0)
	/// Proof: `Inflation::InflationParams` (`max_values`: Some(1), `max_size`: Some(72), added: 567, mode: `MaxEncodedLen`)
	fn force_inflation_recalculation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `49`
		//  Estimated: `1557`
		// Minimum execution time: 13_151_000 picoseconds.
		Weight::from_parts(13_472_000, 0)
			.saturating_add(Weight::from_parts(0, 1557))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Inflation::InflationParams` (r:1 w:0)
	/// Proof: `Inflation::InflationParams` (`max_values`: Some(1), `max_size`: Some(72), added: 567, mode: `MaxEncodedLen`)
	fn force_readjust_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `49`
		//  Estimated: `1557`
		// Minimum execution time: 12_012_000 picoseconds.
		Weight::from_parts(12_276_000, 0)
			.saturating_add(Weight::from_parts(0, 1557))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn force_set_decay_factor() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_671_000 picoseconds.
		Weight::from_parts(9_012_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Inflation::InflationParams` (r:1 w:0)
	/// Proof: `Inflation::InflationParams` (`max_values`: Some(1), `max_size`: Some(72), added: 567, mode: `MaxEncodedLen`)
	fn recalculation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `67`
		//  Estimated: `1557`
		// Minimum execution time: 12_612_000 picoseconds.
		Weight::from_parts(12_822_000, 0)
			.saturating_add(Weight::from_parts(0, 1557))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn hooks_without_recalculation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174`
		//  Estimated: `6196`
		// Minimum execution time: 42_860_000 picoseconds.
		Weight::from_parts(43_386_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
