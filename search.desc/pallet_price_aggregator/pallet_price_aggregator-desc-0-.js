searchState.loadedDescShard("pallet_price_aggregator", 0, "Price Aggregator Pallet\nUsed to calculate the simple average of the accumulated …\nUsed to store the aggregated intermediate values into a …\nUsed to calculate the median of the accumulated values.\nTrait for processing accumulated currency values within a …\nUsed to aggregate the accumulated values over some time …\nAdds a new value to the circular buffer, possibly …\nReturns the average of the accumulated values.\nReturns the average of the accumulated values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNew value aggregator, with the given block number as the …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nProcess the accumulated values and return the result.\nAttempts to add a value to the aggregator, consuming <code>self</code> …\nAutogenerated weights for pallet_price_aggregator\nDuration of aggregation period expressed in the number of …\nNew average native currency value has been calculated and …\nContains a variant per dispatchable extrinsic that this …\nMaximum length of the circular buffer used to calculate …\nConfiguration trait of this pallet.\nStorage for the accumulated native currency price in the …\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nUsed to store the aggregated processed block values during …\nMaximum number of distinct currency values we can store …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNative currency ID that this pallet is supposed to track.\nThe <code>Pallet</code> struct, the main type that implements traits …\nUsed to process accumulated values in the current block.\nThe overarching event type.\nThe current storage version.\nUsed to store aggregated intermediate values for some time …\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAuto-generated docs-only module listing all (public and …\nStorage for the accumulated native currency price in the …\nUsed to store the aggregated processed block values during …\nUsed to store aggregated intermediate values for some time …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for pallet_price_aggregator using the Substrate …\nWeight functions needed for pallet_price_aggregator.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>PriceAggregator::ValuesCircularBuffer</code> (r:1 w:1) …")