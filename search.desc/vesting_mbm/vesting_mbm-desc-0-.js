searchState.loadedDescShard("vesting_mbm", 0, "Returns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe identifier of this migration. Which should be globally …\nCalls <code>U::from(self)</code>.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for vesting_mbm\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAuto-generated docs-only module listing all (public and …\nWeights for vesting_mbm using the Substrate node and …\nWeight functions needed for vesting_mbm.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Vesting::Vesting</code> (r:2 w:1) Proof: <code>Vesting::Vesting</code>…")