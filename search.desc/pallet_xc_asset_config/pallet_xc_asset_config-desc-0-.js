searchState.loadedDescShard("pallet_xc_asset_config", 0, "Cross-chain Asset Config Pallet\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for <code>pallet_xc_asset_config</code>\nExports for versioned migration <code>type</code>s for this pallet.\nMigration storage V3 to V4 wrapped in a …\nAsset is already registered.\nAsset does not exist (hasn’t been registered).\nStorage type is <code>StorageValue</code> with value type <code>MigrationStep</code>.\nThe required origin for managing the asset-hub migration …\nThe Asset Id. This will be used to create the asset and to …\nMapping from an asset id to asset type. Can be used when …\nChanged the asset type mapping for a given asset id\nMapping from an asset type to an asset id. Can be used …\nStores the units per second for local execution for a …\nRegisted mapping between asset type and asset Id.\nRemoved all information related to an asset Id\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nUsed to fetch <code>units per second</code> if cross-chain asset is …\nThe required origin for managing cross-chain asset …\nNotify when the migration step is updated.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nFailed to convert to latest versioned Location\nThe <code>Pallet</code> struct, the main type that implements traits …\nSupported asset type for fee payment removed.\nChanged the amount of units we are charging per execution …\nDefines conversion between asset Id and cross-chain asset …\nChange the xcm type mapping for a given asset Id. The new …\nChange the xcm type mapping for a given asset Id. The new …\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet local asset Id from asset location\nreturns units per second from asset type or <code>None</code> if asset …\nGet asset type from assetId\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>register_asset_location</code>.\nCreate a call with the variant <code>remove_asset</code>.\nCreate a call with the variant <code>remove_payment_asset</code>.\nCreate a call with the variant <code>set_asset_units_per_second</code>.\nCreate a call with the variant <code>update_migration_step</code>.\nRegister new asset location to asset Id mapping.\nRegister new asset location to asset Id mapping.\nRemoves all information related to asset, removing it from …\nRemoves all information related to asset, removing it from …\nRemoves asset from the set of supported payment assets.\nRemoves asset from the set of supported payment assets.\nChange the amount of units we are charging per execution …\nChange the amount of units we are charging per execution …\nAuto-generated docs-only module listing all (public and …\nConvert weight to fee based on units per second and weight.\nChange the xcm type mapping for a given asset Id. The new …\nRegister new asset location to asset Id mapping.\nRemoves all information related to asset, removing it from …\nRemoves asset from the set of supported payment assets.\nChange the amount of units we are charging per execution …\nWarning: Doc-Only\nWarning: Doc-Only\nMapping from an asset id to asset type. Can be used when …\nMapping from an asset type to an asset id. Can be used …\nStores the units per second for local execution for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nWeight functions for <code>pallet_xc_asset_config</code>.\nWeight info trait.\nStorage: <code>XcAssetConfig::AssetIdToLocation</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>XcAssetConfig::AssetIdToLocation</code> (r:1 w:1) Proof: …\nStorage: <code>XcAssetConfig::AssetIdToLocation</code> (r:1 w:1) Proof: …\nStorage: <code>XcAssetConfig::AssetLocationUnitsPerSecond</code> (r:0 …\nStorage: <code>XcAssetConfig::AssetLocationToId</code> (r:1 w:0) Proof: …\nStorage: <code>XcAssetConfig::AssetHubMigrationStep</code> (r:0 w:1) …")