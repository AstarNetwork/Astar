searchState.loadedDescShard("pallet_dapp_staking", 0, "dApp Staking v3 Pallet\nGeneral info about an account’s lock &amp; stakes.\nSimple enum representing errors possible when using sparse …\nAn ordered map based on a B-Tree.\nType alias for bonus status, where:\nWrapper struct that provides additional methods for …\nTODO: remove it once all BonusStatus are updated and the …\nSubperiod during which dApps and stakers earn rewards.\nDescribes which entries are next in line for cleanup.\nComposite type that holds information about how much was …\nGeneral information about a dApp.\nInformation about all of the dApps that got into tiers, …\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nEntry into the tier is mandated by a percentage of the …\nForce the next era to start.\nInfo about an era, including the rewards, how much is …\nInformation required for staker reward payout for a …\nUsed to efficiently store era span information.\nHelper internal struct for iterating over …\nAll updates have been finished\nAll updates have been finished\nEntry into the tier is mandated by a fixed percentage of …\nForce types to speed up the next era, and even period.\nUpdate in progress for the current cursor\nUpdate in progress for the current cursor\nInternal, unexpected error occurred.\nOld or future era values cannot be added.\nProvided era is invalid. Must be exactly one era after the …\nAttempt to crate the iterator failed due to incorrect data.\nInvalid period specified.\nBounded storage capacity exceeded.\nSpan has no more capacity for additional entries.\nSpecified dApp Id doesn’t exist in any tier.\nNo update in progress yet\nNo update in progress yet\nNothing to claim.\nStruct with relevant information for a finished period.\nInfo about the ongoing period.\nGeneral information &amp; state of the dApp staking protocol.\nInformation about how much a particular staker staked on a …\nDescribes stake amount in an particular era/period.\nDistinct subperiods in dApp staking protocol.\nForce the current subperiod to end, and new one to start. …\nTop level description of tier slot parameters used to …\nDescription of tier entry requirement.\nConfiguration of dApp tiers.\nStake amount is to large in respect to what’s available.\nHow much was unlocked in some block.\nUnstake amount is to large in respect to what’s staked.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nSubperiod during which the focus is on voting. No rewards …\nReturns active locked amount. If <code>zero</code>, means that …\nStake the specified <code>amount</code> for the specified <code>subperiod</code>.\nAdds the specified amount to the total locked amount.\nUpdate with the new amount that has just been locked.\nAdds the specified amount to total staked amount, if …\nAdd the specified <code>amount</code> to the appropriate stake amount, …\nAdds the specified amount to the unlocking chunks.\nTriggers the next subperiod, updating appropriate …\nReturns a reference to the underlying allocator.\nAmount undergoing the unlocking period.\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns an unsafe mutable pointer to the vector’s …\nExtracts a mutable slice of the entire vector.\nReturns a raw pointer to the vector’s buffer, or a …\nExtracts a slice containing the entire vector.\nCalculate new <code>TiersConfiguration</code>, based on the old …\nReturns the total number of elements the vector can hold …\nClaims all of the fully unlocked chunks, and returns the …\n‘Claim’ rewards up to the specified era. Returns an …\nClears the map, removing all elements.\nClears the vector, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nConsumes all of the unlocking chunks, and returns the …\nReturns <code>true</code> if the map contains a value for the specified …\nConverts all <code>Voting</code> stake into <code>BuildAndEarn</code>, effectively …\nStake amount valid for the ongoing era.\nTotal reward pool for dApp rewards\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates an empty <code>BTreeMap</code>.\nCreates an empty <code>Vec&lt;T&gt;</code>.\nRemoves the specified range from the vector in bulk, …\nEarliest era for which the account has staking information …\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nCompute the length of this value in bytes when encoded as …\nGets the given key’s corresponding entry in the map for …\nOngoing era.\nEra in which the entry was last time updated\nClones and appends all elements in a slice to the <code>Vec</code>.\nCopies elements from <code>src</code> range to the end of the vector.\nCreates an iterator that visits all elements (key-value …\nCreates an iterator which uses a closure to determine if …\nReturns the first entry in the map for in-place …\nFirst era covered in the span.\nReturns the first key-value pair in the map. The key in …\nFormats the value using the given formatter.\nAmount staked for the specified subperiod.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;(K, V)&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAllocate a <code>Vec&lt;T&gt;</code> and move <code>s</code>’s items into it.\nConvert a boxed slice into a vector by transferring …\nConverts a <code>CString</code> into a Vec&lt;u8&gt;.\nAllocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.\nAllocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.\nAllocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.\nConvert a clone-on-write slice into a vector.\nConverts the given <code>String</code> to a vector <code>Vec</code> that holds …\nReturns the argument unchanged.\nConverts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nAllocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.\nAllocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nCreates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the <code>StakeAmount</code> type for the specified era &amp; …\nGet the <code>EraReward</code> entry for the specified <code>era</code>.\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\ndApp’s unique identifier.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nInserts an element at position <code>index</code> within the vector, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nGets an owning iterator over the entries of the map, …\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator visiting all the keys, in …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nCreates a consuming iterator visiting all the values, in …\nIf <code>true</code> staker has staked during voting subperiod and has …\nEmpty if no locked/unlocking/staked info exists.\n<code>true</code> if nothing is staked, <code>false</code> otherwise\n<code>true</code> if no stake exists, <code>false</code> otherwise.\n<code>true</code> if series is empty, <code>false</code> otherwise.\n<code>true</code> if span is empty, <code>false</code> otherwise.\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the vector contains no elements.\nChecks whether a new era should be triggered, based on the …\n<code>true</code> if the provided era belongs to the next period, <code>false</code> …\nCheck if the given address is a precompile. Should only be …\nCheck if configuration is valid. All vectors are expected …\nCheck if parameters are valid.\nGets an iterator over the entries of the map, sorted by …\nGets a mutable iterator over the entries of the map, …\nGets an iterator over the keys of the map, in sorted order.\nReturns the last entry in the map for in-place …\nLast era covered in the span\nReturns the last key-value pair in the map. The key in …\nLatest era for which stake entry exists.\nLatest period for which stake entry exists.\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nSpan length.\nReturns the number of elements in the map.\nReturns the number of elements in the vector, also …\nHow much active locked amount an account has. This can be …\nReturns a <code>Cursor</code> pointing at the gap before the smallest …\nReturns a <code>CursorMut</code> pointing at the gap before the …\nCleanup staking information if it has expired.\nUpdates <code>Self</code> to reflect the transition to the next era.\nCreate new iterator struct for <code>(era, staked amount)</code> pairs.\nMakes a new, empty <code>BTreeMap</code>.\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nMakes a new empty BTreeMap with a reasonable choice for B.\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nNext subperiod, after <code>self</code>.\nBlock number at which the next era should start.\nStake amount valid from the next era.\nEnding era of current period\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nCurrent period number.\nPeriod for which this entry is relevant.\nRemoves the last element from a vector and returns it, or …\nRemoves and returns the first element in the map. The key …\nRemoves and returns the last element in a vector if the …\nRemoves and returns the last element in the map. The key …\nPush new <code>EraReward</code> entry into the span. If span is not …\nAppends an element to the back of a collection.\nAppends an element if there is sufficient spare capacity, …\nConstructs a double-ended iterator over a sub-range of …\nConstructs a mutable double-ended iterator over a …\nRemoves a key from the map, returning the value at the key …\nRemoves and returns the element at position <code>index</code> within …\nRemoves a key from the map, returning the stored key and …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> more …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nReward destination account for this dApp.\nReturns a new <code>StakeAmount</code> representing the difference …\nForces the length of the vector to <code>new_len</code>.\nSet the next era start block number. Not perfectly clean …\nShrinks the capacity of the vector with a lower bound.\nShrinks the capacity of the vector as much as possible.\nReturns the remaining spare capacity of the vector as a …\nCreates a splicing iterator that replaces the specified …\nReturns vector content as a slice of <code>T</code>, along with the …\nSplits the collection into two at the given key. Returns …\nSplits the collection into two at the given index.\nStake the specified amount on the contract.\nStake the specified <code>amount</code> on the contract, for the …\nAmount that is available for staking.\nTotal amount which was staked at the end of an era.\nAmount that is staked, in respect to the currently active …\nStaked amount of specified <code>type</code> in this era.\nReturns amount staked in the specified period.\nStaked amount on the contract, for specified subperiod, in …\nHow much is staked for the specified subperiod, in respect …\nStaked amount of specified <code>type</code> in the next era.\nPeriod for which account has staking information or <code>None</code> …\nTotal reward pool for staker rewards.\nCurrent subperiod.\nUnstake the specified <code>amount</code>.\nSubtracts the specified amount of the total locked amount.\nSubtract the specified <code>StakeAmount</code>, updating both …\nRemoves an element from the vector and returns it.\nReturn threshold amount for the tier.\nTotal amount staked in both subperiods.\nTotal locked amount by the user. Includes both active …\nCalculate the total number of slots.\nTotal staked amount in this era.\nTotal staked on the contract by the user. Both subperiod …\nTotal staked amount on the contract, in the active period.\nTotal staked amount in the next era.\nShortens the vector, keeping the first <code>len</code> elements and …\nConsume reward for the specified dapp id, returning its …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nBlock in which the unlocking period is finished for this …\nAmount available for unlocking.\nReturns unlocking amount. If <code>zero</code>, means that associated …\nUnlocking chunks.\nUpdate with the new amount that has been removed from …\nUpdate with the new amount that has just started …\nUnstakes some of the specified amount from the contract.\nUnstake the specified StakeAmount entries from the …\nSubtracts the specified amount from the total staked …\nUnstakes the specified amounts by subtracting them from …\nReturns a <code>Cursor</code> pointing at the gap after the greatest key\nReturns a <code>CursorMut</code> pointing at the gap after the greatest …\nGets an iterator over the values of the map, in order by …\nGets a mutable iterator over the values of the map, in …\nAutogenerated weights for pallet_dapp_staking\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\n“Best effort” zeroization for <code>Vec</code>.\nDouble the remaining block for next era start\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe identifier of this migration. Which should be globally …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExports for versioned migration <code>type</code>s for this pallet.\nMigration V9 to V10 wrapped in a …\nUsed to check whether an account is allowed to participate …\nAccount is not allowed to participate in dApp staking due …\nGeneral information about dApp staking protocol state.\nBase native currency price used to calculate base number …\nBonus reward has been paid out to a staker with an …\nContains a variant per dispatchable extrinsic that this …\nAccount has claimed unlocked amount, removing the lock …\nConfiguration trait of this pallet.\nSmart contract already exists within dApp staking protocol.\nSpecified smart contract does not exist in dApp staking.\nPrivileged origin that is allowed to register smart …\nInformation about how much has been staked on a smart …\nContract is still active, not unregistered.\nPrivileged origin that is allowed to unregister smart …\nCurrency used for staking. Reference: …\nGeneral information about the current era.\nDescribes era length, subperiods &amp; period length, as well …\ndApp owner has been changed.\nA smart contract has been registered for dApp staking\ndApp reward has been paid out to a beneficiary.\ndApp reward destination has been updated.\nAccount is participating in dApp staking.\nInformation about which tier a dApp belonged to in a …\ndApp has been unregistered\nPallet is disabled/in maintenance mode.\nMaximum length of a single era reward span length entry.\nInformation about rewards for each era.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nMaximum number of smart contracts has been reached.\nSome expired stake entries have been removed from storage.\nPrivileged origin has forced a new era and possibly a …\nForce call is not allowed in production.\nA reason for freezing funds.\nCan be used to configure the genesis state of this pallet.\nHistory cleanup marker - holds information about which DB …\nTotal staked amount on contract is below the minimum …\nMap of all dApps integrated into dApp staking protocol.\nAn unexpected error occurred while trying to claim bonus …\nAn unexpected error occurred while trying to claim dApp …\nAn unexpected error occurred while trying to claim staker …\nAn unexpected error occurred while trying to stake.\nAn unexpected error occurred while trying to unstake.\nClaim era is invalid - it must be in history, and rewards …\nInvalid tier parameters were provided. This can happen if …\nGeneral locked/staked information for each account.\nAccount has locked some amount into dApp staking.\nTotal locked amount for staker is below minimum threshold.\nMaintenance mode has been either enabled or disabled.\nPrivileged origin for managing dApp staking pallet.\nThe maximum number of ‘safe move actions’ allowed …\nMaximum number of contracts that can be integrated into …\nMaximum amount of stake contract entries an account is …\nMaximum number of unlocking chunks that can exist per …\nMinimum amount an account has to lock in dApp staking in …\nMinimum amount staker can stake on a contract.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nUsed to provide price information about the native token.\nNot possible to assign a new dApp Id. This should never …\nNew era has started.\nNew subperiod has started.\nTier parameters, used to calculate tier configuration, …\nCounter for unique dApp identifiers.\nThere are no claimable rewards.\nNo dApp tier info exists for the specified era. This can …\nThere are no expired entries to cleanup for the account.\nAccount has no staking information for the contract.\nThere are no eligible unlocked chunks to claim. This can …\nThere are no unlocking chunks available to relock.\nAccount is has no eligible stake amount for bonus reward.\nNumber of different tiers.\ndApp staking event observers, notified when certain events …\nCall origin is not dApp owner.\nThe <code>Pallet</code> struct, the main type that implements traits …\nInformation about period’s end.\nStake operation is rejected since period ends in the next …\nTier ranking enabled.\nAccount has relocked all of the unlocking chunks.\nRemaining stake prevents entire balance of starting the …\nAccount has claimed some stake rewards.\nRewards are no longer claimable since they are too old.\nReward payout has failed due to an unexpected reason.\nNumber of periods for which we keep rewards available for …\nThe overarching event type.\nThe overarching freeze reason.\nThe current storage version.\nSafeguard to prevent unwanted operations in production. …\nSame contract specified as source and destination.\nDescribes smart contract in the context required by dApp …\nAccount has staked some amount on a smart contract.\nAccount has moved some stake from a source smart contract …\nInformation about how much each staker has staked for each …\nUsed to handle reward payouts &amp; reward pool amount …\nStatic tier parameters used to calculate tier …\nTier configuration user for current &amp; preceding eras.\nUsed to calculate total number of tier slots for some …\nThere are too many contract stake entries for the account. …\nCannot add additional unlocking chunks due to capacity …\nThe amount being staked is too large compared to what’s …\nThere are unclaimed rewards remaining from past eras or …\nAccount has started the unlocking process for some amount.\nNumber of standard eras that need to pass before unlocking …\nAccount has unstaked some amount from a smart contract.\nUnstake amount is greater than the staked amount.\nUnstaking is rejected since the period in which past stake …\nAccount has unstaked funds from an unregistered smart …\nWeight info for various calls &amp; operations in the pallet.\nPerforming locking or staking with 0 amount.\nUsed to claim bonus reward for a smart contract, if …\nUsed to claim bonus reward for a smart contract, if …\nUsed to claim bonus reward for a smart contract on behalf …\nUsed to claim bonus reward for a smart contract on behalf …\nUsed to claim dApp reward for the specified era.\nUsed to claim dApp reward for the specified era.\nClaims some staker rewards, if user has any. In the case …\nClaims some staker rewards, if user has any. In the case …\nClaims some staker rewards for the specified account, if …\nClaims some staker rewards for the specified account, if …\nClaims all of fully unlocked chunks, removing the lock …\nClaims all of fully unlocked chunks, removing the lock …\nCleanup expired stake entries for the contract.\nCleanup expired stake entries for the contract.\nAuto-generated docs-only module listing all defined …\nCalculates the <code>EraRewardSpan</code> index for the specified era.\nUsed to force a change of era or subperiod. The effect isn…\nUsed to force a change of era or subperiod. The effect isn…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the dApp tier assignment for the current era, …\nInner <code>stake</code> functionality.\nInner <code>unstake</code> functionality for an <strong>active</strong> smart contract. …\nHandles unstaking from an <strong>unregistered</strong> smart contract.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> if the account is a staker, <code>false</code> otherwise.\nLocks additional funds into dApp staking.\nLocks additional funds into dApp staking.\nUsed to enable or disable maintenance mode. Can only be …\nUsed to enable or disable maintenance mode. Can only be …\nTransfers stake between two smart contracts, ensuring …\nTransfers stake between two smart contracts, ensuring …\nCreate a call with the variant <code>claim_bonus_reward</code>.\nCreate a call with the variant <code>claim_bonus_reward_for</code>.\nCreate a call with the variant <code>claim_dapp_reward</code>.\nCreate a call with the variant <code>claim_staker_rewards</code>.\nCreate a call with the variant <code>claim_staker_rewards_for</code>.\nCreate a call with the variant <code>claim_unlocked</code>.\nCreate a call with the variant <code>cleanup_expired_entries</code>.\nCreate a call with the variant <code>force</code>.\nCreate a call with the variant <code>lock</code>.\nCreate a call with the variant <code>maintenance_mode</code>.\nCreate a call with the variant <code>move_stake</code>.\nCreate a call with the variant <code>register</code>.\nCreate a call with the variant <code>relock_unlocking</code>.\nCreate a call with the variant <code>set_dapp_owner</code>.\nCreate a call with the variant <code>set_dapp_reward_beneficiary</code>.\nCreate a call with the variant <code>set_static_tier_params</code>.\nCreate a call with the variant <code>stake</code>.\nCreate a call with the variant <code>unbond_and_unstake</code>.\nCreate a call with the variant <code>unlock</code>.\nCreate a call with the variant <code>unregister</code>.\nCreate a call with the variant <code>unstake</code>.\nCreate a call with the variant <code>unstake_from_unregistered</code>.\nCreate a call with the variant <code>withdraw_unbonded</code>.\nUsed to register a new contract for dApp staking.\nUsed to register a new contract for dApp staking.\nUsed to change dApp owner.\nUsed to change dApp owner.\nUsed to modify the reward beneficiary account for a dApp.\nUsed to modify the reward beneficiary account for a dApp.\nUsed to set static tier parameters, which are used to …\nUsed to set static tier parameters, which are used to …\nStake the specified amount on a smart contract. The …\nStake the specified amount on a smart contract. The …\nAuto-generated docs-only module listing all (public and …\nWrapper around <em>legacy-like</em> <code>unbond_and_unstake</code>.\nWrapper around <em>legacy-like</em> <code>unbond_and_unstake</code>.\nAttempts to start the unlocking process for the specified …\nAttempts to start the unlocking process for the specified …\nUnlocking period expressed in the number of blocks.\nUnregister dApp from dApp staking protocol, making it …\nUnregister dApp from dApp staking protocol, making it …\nUnstake the specified amount from a smart contract. The …\nUnstake the specified amount from a smart contract. The …\nUsed to unstake funds from a contract that was …\nUsed to unstake funds from a contract that was …\nWrapper around <em>legacy-like</em> <code>withdraw_unbonded</code>.\nWrapper around <em>legacy-like</em> <code>withdraw_unbonded</code>.\nUsed to claim bonus reward for a smart contract, if …\nUsed to claim bonus reward for a smart contract on behalf …\nUsed to claim dApp reward for the specified era.\nClaims some staker rewards, if user has any. In the case …\nClaims some staker rewards for the specified account, if …\nClaims all of fully unlocked chunks, removing the lock …\nCleanup expired stake entries for the contract.\nUsed to force a change of era or subperiod. The effect isn…\nLocks additional funds into dApp staking.\nUsed to enable or disable maintenance mode. Can only be …\nTransfers stake between two smart contracts, ensuring …\nUsed to register a new contract for dApp staking.\nWarning: Doc-Only\nUsed to change dApp owner.\nUsed to modify the reward beneficiary account for a dApp.\nUsed to set static tier parameters, which are used to …\nStake the specified amount on a smart contract. The …\nWrapper around <em>legacy-like</em> <code>unbond_and_unstake</code>.\nAttempts to start the unlocking process for the specified …\nUnregister dApp from dApp staking protocol, making it …\nUnstake the specified amount from a smart contract. The …\nUsed to unstake funds from a contract that was …\nWrapper around <em>legacy-like</em> <code>withdraw_unbonded</code>.\nGeneral information about dApp staking protocol state.\nInformation about how much has been staked on a smart …\nGeneral information about the current era.\nInformation about which tier a dApp belonged to in a …\nInformation about rewards for each era.\nHistory cleanup marker - holds information about which DB …\nMap of all dApps integrated into dApp staking protocol.\nGeneral locked/staked information for each account.\nCounter for unique dApp identifiers.\nInformation about period’s end.\nSafeguard to prevent unwanted operations in production. …\nInformation about how much each staker has staked for each …\nStatic tier parameters used to calculate tier …\nTier configuration user for current &amp; preceding eras.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for pallet_dapp_staking using the Substrate node …\nWeight functions needed for pallet_dapp_staking.\nStorage: <code>DappStaking::StakerInfo</code> (r:1 w:1) Proof: …\nStorage: <code>DappStaking::IntegratedDApps</code> (r:1 w:0) Proof: …\nStorage: <code>DappStaking::Ledger</code> (r:1 w:1) Proof: …\nStorage: <code>DappStaking::Ledger</code> (r:1 w:1) Proof: …\nStorage: <code>DappStaking::Ledger</code> (r:1 w:1) Proof: …\nStorage: <code>DappStaking::StakerInfo</code> (r:17 w:16) Proof: …\nStorage: <code>DappStaking::ContractStake</code> (r:101 w:0) Proof: …\nStorage: <code>DappStaking::Safeguard</code> (r:1 w:0) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>DappStaking::Ledger</code> (r:1 w:1) Proof: …\nStorage: <code>DappStaking::Ledger</code> (r:1 w:1) Proof: …\nStorage: <code>DappStaking::IntegratedDApps</code> (r:2 w:0) Proof: …\nStorage: <code>DappStaking::IntegratedDApps</code> (r:2 w:0) Proof: …\nStorage: <code>DappStaking::HistoryCleanupMarker</code> (r:1 w:1) …\nStorage: <code>DappStaking::CurrentEraInfo</code> (r:1 w:1) Proof: …\nStorage: <code>DappStaking::CurrentEraInfo</code> (r:1 w:1) Proof: …\nStorage: <code>DappStaking::CurrentEraInfo</code> (r:1 w:1) Proof: …\nStorage: <code>DappStaking::IntegratedDApps</code> (r:1 w:1) Proof: …\nStorage: <code>DappStaking::Ledger</code> (r:1 w:1) Proof: …\nStorage: <code>DappStaking::IntegratedDApps</code> (r:1 w:1) Proof: …\nStorage: <code>DappStaking::IntegratedDApps</code> (r:1 w:1) Proof: …\nStorage: <code>DappStaking::StaticTierParams</code> (r:0 w:1) Proof: …\nStorage: <code>DappStaking::IntegratedDApps</code> (r:1 w:0) Proof: …\nStorage: <code>DappStaking::Ledger</code> (r:2 w:1) Proof: …\nStorage: <code>DappStaking::Ledger</code> (r:1 w:1) Proof: …\nStorage: <code>DappStaking::IntegratedDApps</code> (r:1 w:1) Proof: …\nStorage: <code>DappStaking::IntegratedDApps</code> (r:1 w:0) Proof: …\nStorage: <code>DappStaking::IntegratedDApps</code> (r:1 w:0) Proof: …")