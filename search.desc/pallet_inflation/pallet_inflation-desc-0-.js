searchState.loadedDescShard("pallet_inflation", 0, "Inflation Handler Pallet\nConfiguration of the inflation. Contains information about …\nInflation parameters.\nDefines functions used to payout the beneficiaries of …\nAdjustable staker rewards, based on the total value staked.\nPortion of the inflation that can go towards the …\nBase staker reward pool per era - this is always provided …\nPortion of the inflation that goes towards base staker …\nPortion of the inflation that goes towards bonus staker …\nBonus reward pool per period, for eligible stakers.\nReward for collator who produced the block. Always …\nPayout reward to the collator responsible for producing …\nPortion of the inflation that goes towards collators.\ndApp reward pool per era - based on this the tier rewards …\nPortion of the inflation that goes towards dApp rewards …\nCompounded decay multiplied into rewards when they are …\nPer-block decay rate applied to the decay factor. A value …\nPer-block decay rate applied to all reward pools and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe ideal staking rate, in respect to total issuance. Used …\nThe ideal staking rate, in respect to total issuance. Used …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> if sum of all percentages is <code>one whole</code>, <code>false</code> …\nMaximum amount of issuance we can have during this cycle.\nMaximum possible inflation rate, based on the total …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nEra number at which the inflation configuration must be …\nSanity check that does rudimentary checks on the …\nPayout reward to the treasury.\nPortion of the inflation that goes towards the treasury.\nPart of the inflation going towards the treasury. Always …\nAutogenerated weights for pallet_inflation\nExports for versioned migration <code>type</code>s for this pallet.\nMigration V1 to V2 wrapped in a …\nActive inflation configuration parameters. They describe …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nCycle (‘year’) configuration - covers periods, …\nFlag indicating whether on the first possible opportunity, …\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nInflation recalculation has been forced.\nCan be used to configure the genesis state of this pallet.\nInflation parameters have been force changed. This will …\nStatic inflation parameters - used to calculate active …\nSum of all parts must be one whole (100%).\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nNew inflation configuration has been set.\nThe <code>Pallet</code> struct, the main type that implements traits …\nHandler for ‘per-block’ payouts.\nThe overarching event type.\nThe current storage version.\nWeight information for extrinsics in this pallet.\nInforms the pallet that the next block will be the first …\nAuto-generated docs-only module listing all defined …\nUsed to force inflation recalculation. This is done in the …\nUsed to force inflation recalculation. This is done in the …\nRe-adjust the existing inflation configuration using the …\nRe-adjust the existing inflation configuration using the …\nUsed to force-set the inflation parameters. The parameters …\nUsed to force-set the inflation parameters. The parameters …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant …\nCreate a call with the variant <code>force_readjust_config</code>.\nCreate a call with the variant <code>force_set_inflation_params</code>.\nAuto-generated docs-only module listing all (public and …\nUsed to force inflation recalculation. This is done in the …\nRe-adjust the existing inflation configuration using the …\nUsed to force-set the inflation parameters. The parameters …\nActive inflation configuration parameters. They describe …\nFlag indicating whether on the first possible opportunity, …\nStatic inflation parameters - used to calculate active …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for pallet_inflation using the Substrate node and …\nWeight functions needed for pallet_inflation.\nStorage: <code>Inflation::InflationParams</code> (r:1 w:0) Proof: …\nStorage: <code>Inflation::InflationParams</code> (r:1 w:0) Proof: …\nStorage: <code>Inflation::InflationParams</code> (r:0 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStorage: <code>System::Account</code> (r:2 w:2) Proof: <code>System::Account</code> (…\nCalls <code>U::from(self)</code>.\nStorage: <code>Inflation::InflationParams</code> (r:1 w:0) Proof: …")