searchState.loadedDescShard("astar_primitives", 0, "Core Astar types.\nSome way of identifying an account on the chain. We …\nThe address format for describing accounts.\nIt’s a 20 byte representation.\nIt’s a 32 byte representation.\nId used for identifying assets.\nBalance of an account.\nBlock type.\nAn index to a block.\nAn ECDSA/SECP256k1 signature.\nAn Ed25519 signature.\nA hash of some data used by the chain.\nBlock header type as expected by this runtime.\nIt’s an account ID (pubkey).\nIt’s an account index.\nCurrently used MAX_POV_SIZE on Polkadot &amp; Kusama is 10 MiB.\nIndex of a transaction in the chain.\nIt’s some arbitrary raw bytes.\nAlias to 512-bit hash when used in the context of a …\nAn Sr25519 signature.\nUnfreeze chain on failed migration and continue with …\ndApp staking &amp; inflation primitives.\nA chain-specific digest of data useful for light clients …\nChecked Ethereum transaction primitives.\nEVM primitives.\nThe accompanying extrinsics.\nThe merkle root of the extrinsics.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenesis generation helpers &amp; primitives.\nGovernance primitives.\nThe block header.\nCalls <code>U::from(self)</code>.\nThe block number.\nOracle &amp; price primitives.\nParachain related constants.\nThe parent hash.\nPrecompiles\nThe state trie merkle root\nUseful primitives for testing.\nXCM Primitives\nUsed to check whether an account is allowed to participate …\nConfiguration for cycles, periods, subperiods &amp; eras.\nDapp Id type\nEra number type\nEVM smart contract instance.\nTrait for observers (listeners) of various events related …\nPeriod number type\nRankedTier is wrapper around u8 to hold both tier and …\nStandard tier slots arguments. Initially decided for …\nMulti-VM pointer to smart contract instance.\nTrait defining the interface for dApp staking …\nInterface for staking reward handler.\nStandard tier slots implementation, as proposed in the …\nTier Id type\nTrait for calculating the total number of tier slots for …\nWasm smart contract instance.\n<code>true</code> if the account is allowed to stake, <code>false</code> otherwise.\nCalled in the block right before the next era starts.\nHow many blocks are there per cycle (a ‘year’).\nHow many blocks are there per standard era.\nReturns the bonus reward pool for a period.\nFor how many standard era lengths do all the build&amp;earn …\nFor how many standard era lengths does the cycle (a ‘year…\nHow many standard eras are there in the build&amp;earn …\nHow many distinct eras are there in a cycle.\nHow many distinct eras are there in a single period.\nFor how many standard era lengths does the voting …\nCreate a new smart contract representation for the …\nFind rank based on lower/upper bounds and staked amount. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new encoded RankedTier from tier and rank. Returns …\nCreate new encoded RankedTier from tier and rank with …\nReturns the total number of tier slots for the given price.\nAttempts to pay out the rewards to the beneficiary.\nFor how many standard era lengths does the period last.\nHow many different periods are there in a cycle (a ‘year…\nReturns the staker reward pool &amp; dApp reward pool for an …\nCreate a new smart contract representation for the …\nThe checked Ethereum transaction. Only contracts <code>call</code> is …\nMax Ethereum tx input size: 65_536 bytes\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGas limit.\nInput of a contract call.\nCalls <code>U::from(self)</code>.\nOptional access list, specified in EIP-2930.\nContract address to call.\nAmount to transfer.\nThe default address associated with account as there is no …\nWrapper around the <code>EvmFungibleAdapter</code> from the <code>pallet-evm</code>.\nRevert opt code. It’s inserted at the precompile …\nHandler for automatic revert code registration.\nFixed-size uninterpreted hash type with 20 bytes (160 …\nFixed-size uninterpreted hash type with 32 bytes (256 …\nMappings derieved from hashing the original address\nTrait describing an object that can hash a slice of bytes. …\nThe length in bytes of the <code>Hasher</code> output.\nMaximum value.\nThe address fetched from the mappings and the account is …\nThe output type of the <code>Hasher</code>\nWhat to use to build <code>HashMap</code>s with this <code>Hasher</code>.\nLittle-endian large integer type 256-bit unsigned integer.\nMapping between Native and EVM Addresses\nComputes the absolute difference between self and other.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a byte slice containing the entire fixed hash.\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a mutable byte slice containing the entire fixed …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nExtracts a reference to the byte array containing the …\nReturns a mutable raw pointer to the value.\nReturns a mutable raw pointer to the value.\nReturns a constant raw pointer to the value.\nReturns a constant raw pointer to the value.\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nAssign the bytes from the byte slice <code>src</code> to <code>self</code>.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nReturn specific byte. Byte 0 is the least significant …\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nReturns the argument unchanged.\nConstructs a hash type from the given reference to the …\nConstructs a hash type from the given bytes array of fixed …\nConstructs a hash type from the given reference to the …\nConverts from big endian representation bytes in memory.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nCreates a new hash type from the given <code>u64</code> value.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreate a new fixed-hash from the given slice <code>src</code>.\nCreates a hash type instance from the given string.\nCreates a hash type instance from the given string.\nConverts a string slice in a given base to an integer. …\nMultiplies two 256-bit integers to produce full 512-bit …\nCompute the hash of the provided slice of bytes returning …\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the underlying address\nWhether this is zero.\nReturns <code>true</code> if no bits are set.\nReturns <code>true</code> if no bits are set.\nReturns the number of leading zeros in the binary …\nReturns the size of this hash in bytes.\nReturns the size of this hash in bytes.\nLow 2 words (u128)\nConversion to u32\nLow word (u64)\nThe maximum value which can be inhabited by this type.\nOne (multiplicative identity) of this type.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nFast exponentiation by squaring …\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content.\nCreate a new hash with cryptographically random content …\nCreate a new hash with cryptographically random content …\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value.\nAssign <code>self</code> to a cryptographically random value using the …\nAssign <code>self</code> to a cryptographically random value using the …\nReturns a new fixed hash where all bits are set to the …\nReturns a new fixed hash where all bits are set to the …\nAddition which saturates at the maximum value (Self::MAX).\nMultiplication which saturates at the maximum value..\nSubtraction which saturates at zero.\nGets the account id associated with given evm address, if …\nGets the account id associated with given evm address. If …\nConvert to big-endian bytes.\nGets the default account id which is associated with given …\nGets the default evm address which is associated with …\nReturns the inner bytes array.\nReturns the inner bytes array.\nGets the evm address associated with given account id, if …\nGets the evm address associated with given account id. If …\nConvert to little-endian bytes.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as big-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as little-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the lowest 8 bytes interpreted as native-endian.\nReturns the number of trailing zeros in the binary …\nWrite to the slice in big-endian format.\nZero (additive identity) of this type.\nReturns a new zero-initialized fixed hash.\nReturns a new zero-initialized fixed hash.\nHelper struct for genesis configuration.\nReturn the <code>account Id</code> (address) of the genesis account.\nAccount ID\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate a new genesis account from a seed.\nHelper function to generate an account ID from seed\nHelper function to generate a crypto pair from seed\nCalls <code>U::from(self)</code>.\nReturn the <code>public key</code> of the genesis account.\nPublic key\nA dummy implementation of <code>CombineData</code> trait that does …\nInterface for fetching price of the native token.\nGet the price of the native token.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAstar parachain Id used in production.\nShibuya parachain Id used in production.\nShiden parachain Id used in production.\nStruct that allows only calls based on <code>Filter</code> to pass …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nTest <code>Header</code> type aligned with Astar primitives.\nA chain-specific digest of data useful for light clients …\nThe merkle root of the extrinsics.\nThe block number.\nThe parent hash.\nThe state trie merkle root\n<code>Asset</code> reserve location provider. It’s based on …\nConvert <code>AccountId</code> to <code>Location</code>.\nAllows execution from <code>origin</code> if it is contained in <code>T</code> (i.e. …\nUsed to convert between cross-chain asset multilocation …\nUsed as weight trader for foreign assets.\nUsed to determine whether the cross-chain asset is coming …\nUsed to deposit XCM fees into a destination account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")