
// This file is part of Astar.

// Copyright (C) 2019-2023 Stake Technologies Pte.Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// Astar is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Astar is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Astar. If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_dapp_staking_v3
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Dinos-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/astar-collator
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_dapp_staking_v3
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=weights.rs
// --template=./scripts/templates/weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_dapp_staking_v3.
pub trait WeightInfo {
	fn maintenance_mode() -> Weight;
	fn register() -> Weight;
	fn set_dapp_reward_beneficiary() -> Weight;
	fn set_dapp_owner() -> Weight;
	fn unregister() -> Weight;
	fn lock() -> Weight;
	fn unlock() -> Weight;
	fn claim_unlocked(x: u32, ) -> Weight;
	fn relock_unlocking() -> Weight;
	fn stake() -> Weight;
	fn unstake() -> Weight;
	fn claim_staker_rewards_past_period(x: u32, ) -> Weight;
	fn claim_staker_rewards_ongoing_period(x: u32, ) -> Weight;
	fn claim_bonus_reward() -> Weight;
	fn claim_dapp_reward() -> Weight;
	fn unstake_from_unregistered() -> Weight;
	fn cleanup_expired_entries(x: u32, ) -> Weight;
	fn force() -> Weight;
	fn on_initialize_voting_to_build_and_earn() -> Weight;
	fn on_initialize_build_and_earn_to_voting() -> Weight;
	fn on_initialize_build_and_earn_to_build_and_earn() -> Weight;
	fn dapp_tier_assignment(x: u32, ) -> Weight;
}

/// Weights for pallet_dapp_staking_v3 using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn maintenance_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:1)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	/// Storage: DappStaking CounterForIntegratedDApps (r:1 w:1)
	/// Proof: DappStaking CounterForIntegratedDApps (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: DappStaking NextDAppId (r:1 w:1)
	/// Proof: DappStaking NextDAppId (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3093`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(18_000_000, 3093)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:1)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	fn set_dapp_reward_beneficiary() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3093`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 3093)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:1)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	fn set_dapp_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3093`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(14_000_000, 3093)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:1)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	/// Storage: DappStaking ContractStake (r:0 w:1)
	/// Proof: DappStaking ContractStake (max_values: Some(65535), max_size: Some(93), added: 2073, mode: MaxEncodedLen)
	fn unregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3093`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(19_000_000, 3093)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	fn lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12`
		//  Estimated: `4764`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(43_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `163`
		//  Estimated: `4764`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(43_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 3]`.
	fn claim_unlocked(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `160 + x * (17 Â±0)`
		//  Estimated: `4764`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(40_955_543, 4764)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	fn relock_unlocking() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174`
		//  Estimated: `4764`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(40_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:0)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: DappStaking StakerInfo (r:1 w:1)
	/// Proof: DappStaking StakerInfo (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: DappStaking ContractStake (r:1 w:1)
	/// Proof: DappStaking ContractStake (max_values: Some(65535), max_size: Some(93), added: 2073, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258`
		//  Estimated: `4764`
		// Minimum execution time: 45_000_000 picoseconds.
		Weight::from_parts(49_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:0)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: DappStaking StakerInfo (r:1 w:1)
	/// Proof: DappStaking StakerInfo (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: DappStaking ContractStake (r:1 w:1)
	/// Proof: DappStaking ContractStake (max_values: Some(65535), max_size: Some(93), added: 2073, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn unstake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `437`
		//  Estimated: `4764`
		// Minimum execution time: 48_000_000 picoseconds.
		Weight::from_parts(54_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:0)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(405), added: 2880, mode: MaxEncodedLen)
	/// Storage: DappStaking PeriodEnd (r:1 w:0)
	/// Proof: DappStaking PeriodEnd (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 8]`.
	fn claim_staker_rewards_past_period(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `485 + x * (8 Â±0)`
		//  Estimated: `4764`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(51_664_058, 4764)
			// Standard Error: 15_971
			.saturating_add(Weight::from_parts(4_243_613, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:0)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(405), added: 2880, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 8]`.
	fn claim_staker_rewards_ongoing_period(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `438 + x * (8 Â±0)`
		//  Estimated: `4764`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(48_357_596, 4764)
			// Standard Error: 16_408
			.saturating_add(Weight::from_parts(4_302_059, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: DappStaking StakerInfo (r:1 w:1)
	/// Proof: DappStaking StakerInfo (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: DappStaking PeriodEnd (r:1 w:0)
	/// Proof: DappStaking PeriodEnd (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn claim_bonus_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `158`
		//  Estimated: `3603`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(36_000_000, 3603)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:0)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	/// Storage: DappStaking DAppTiers (r:1 w:1)
	/// Proof: DappStaking DAppTiers (max_values: None, max_size: Some(483), added: 2958, mode: MaxEncodedLen)
	fn claim_dapp_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1086`
		//  Estimated: `3948`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(41_000_000, 3948)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:0)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	/// Storage: DappStaking StakerInfo (r:1 w:1)
	/// Proof: DappStaking StakerInfo (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn unstake_from_unregistered() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `397`
		//  Estimated: `4764`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(47_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: DappStaking StakerInfo (r:4 w:3)
	/// Proof: DappStaking StakerInfo (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 3]`.
	fn cleanup_expired_entries(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `250 + x * (75 Â±0)`
		//  Estimated: `4764 + x * (2613 Â±0)`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(38_854_143, 4764)
			// Standard Error: 54_134
			.saturating_add(Weight::from_parts(7_359_116, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2613).saturating_mul(x.into()))
	}
	fn force() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
	}
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: DappStaking NextTierConfig (r:1 w:1)
	/// Proof: DappStaking NextTierConfig (max_values: Some(1), max_size: Some(161), added: 656, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:1)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(405), added: 2880, mode: MaxEncodedLen)
	/// Storage: DappStaking TierConfig (r:0 w:1)
	/// Proof: DappStaking TierConfig (max_values: Some(1), max_size: Some(161), added: 656, mode: MaxEncodedLen)
	fn on_initialize_voting_to_build_and_earn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `151`
		//  Estimated: `3870`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(24_000_000, 3870)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: DappStaking StaticTierParams (r:1 w:0)
	/// Proof: DappStaking StaticTierParams (max_values: Some(1), max_size: Some(167), added: 662, mode: MaxEncodedLen)
	/// Storage: DappStaking TierConfig (r:1 w:0)
	/// Proof: DappStaking TierConfig (max_values: Some(1), max_size: Some(161), added: 656, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:1)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(405), added: 2880, mode: MaxEncodedLen)
	/// Storage: DappStaking PeriodEnd (r:0 w:1)
	/// Proof: DappStaking PeriodEnd (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: DappStaking DAppTiers (r:0 w:1)
	/// Proof: DappStaking DAppTiers (max_values: None, max_size: Some(483), added: 2958, mode: MaxEncodedLen)
	/// Storage: DappStaking NextTierConfig (r:0 w:1)
	/// Proof: DappStaking NextTierConfig (max_values: Some(1), max_size: Some(161), added: 656, mode: MaxEncodedLen)
	fn on_initialize_build_and_earn_to_voting() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `685`
		//  Estimated: `3870`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(37_000_000, 3870)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:1)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(405), added: 2880, mode: MaxEncodedLen)
	/// Storage: DappStaking DAppTiers (r:0 w:1)
	/// Proof: DappStaking DAppTiers (max_values: None, max_size: Some(483), added: 2958, mode: MaxEncodedLen)
	fn on_initialize_build_and_earn_to_build_and_earn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73`
		//  Estimated: `3870`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 3870)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking ContractStake (r:101 w:0)
	/// Proof: DappStaking ContractStake (max_values: Some(65535), max_size: Some(93), added: 2073, mode: MaxEncodedLen)
	/// Storage: DappStaking TierConfig (r:1 w:0)
	/// Proof: DappStaking TierConfig (max_values: Some(1), max_size: Some(161), added: 656, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 100]`.
	fn dapp_tier_assignment(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `158 + x * (33 Â±0)`
		//  Estimated: `3063 + x * (2073 Â±0)`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(12_709_998, 3063)
			// Standard Error: 8_047
			.saturating_add(Weight::from_parts(2_731_946, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2073).saturating_mul(x.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn maintenance_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:1)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	/// Storage: DappStaking CounterForIntegratedDApps (r:1 w:1)
	/// Proof: DappStaking CounterForIntegratedDApps (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: DappStaking NextDAppId (r:1 w:1)
	/// Proof: DappStaking NextDAppId (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3093`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(18_000_000, 3093)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:1)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	fn set_dapp_reward_beneficiary() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3093`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 3093)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:1)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	fn set_dapp_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3093`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(14_000_000, 3093)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:1)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	/// Storage: DappStaking ContractStake (r:0 w:1)
	/// Proof: DappStaking ContractStake (max_values: Some(65535), max_size: Some(93), added: 2073, mode: MaxEncodedLen)
	fn unregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3093`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(19_000_000, 3093)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	fn lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12`
		//  Estimated: `4764`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(43_000_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `163`
		//  Estimated: `4764`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(43_000_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 3]`.
	fn claim_unlocked(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `160 + x * (17 Â±0)`
		//  Estimated: `4764`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(40_955_543, 4764)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	fn relock_unlocking() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174`
		//  Estimated: `4764`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(40_000_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:0)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: DappStaking StakerInfo (r:1 w:1)
	/// Proof: DappStaking StakerInfo (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: DappStaking ContractStake (r:1 w:1)
	/// Proof: DappStaking ContractStake (max_values: Some(65535), max_size: Some(93), added: 2073, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258`
		//  Estimated: `4764`
		// Minimum execution time: 45_000_000 picoseconds.
		Weight::from_parts(49_000_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:0)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: DappStaking StakerInfo (r:1 w:1)
	/// Proof: DappStaking StakerInfo (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: DappStaking ContractStake (r:1 w:1)
	/// Proof: DappStaking ContractStake (max_values: Some(65535), max_size: Some(93), added: 2073, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn unstake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `437`
		//  Estimated: `4764`
		// Minimum execution time: 48_000_000 picoseconds.
		Weight::from_parts(54_000_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:0)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(405), added: 2880, mode: MaxEncodedLen)
	/// Storage: DappStaking PeriodEnd (r:1 w:0)
	/// Proof: DappStaking PeriodEnd (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 8]`.
	fn claim_staker_rewards_past_period(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `485 + x * (8 Â±0)`
		//  Estimated: `4764`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(51_664_058, 4764)
			// Standard Error: 15_971
			.saturating_add(Weight::from_parts(4_243_613, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:0)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(405), added: 2880, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 8]`.
	fn claim_staker_rewards_ongoing_period(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `438 + x * (8 Â±0)`
		//  Estimated: `4764`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(48_357_596, 4764)
			// Standard Error: 16_408
			.saturating_add(Weight::from_parts(4_302_059, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: DappStaking StakerInfo (r:1 w:1)
	/// Proof: DappStaking StakerInfo (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: DappStaking PeriodEnd (r:1 w:0)
	/// Proof: DappStaking PeriodEnd (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn claim_bonus_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `158`
		//  Estimated: `3603`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(36_000_000, 3603)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:0)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	/// Storage: DappStaking DAppTiers (r:1 w:1)
	/// Proof: DappStaking DAppTiers (max_values: None, max_size: Some(483), added: 2958, mode: MaxEncodedLen)
	fn claim_dapp_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1086`
		//  Estimated: `3948`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(41_000_000, 3948)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: DappStaking IntegratedDApps (r:1 w:0)
	/// Proof: DappStaking IntegratedDApps (max_values: Some(65535), max_size: Some(123), added: 2103, mode: MaxEncodedLen)
	/// Storage: DappStaking StakerInfo (r:1 w:1)
	/// Proof: DappStaking StakerInfo (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn unstake_from_unregistered() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `397`
		//  Estimated: `4764`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(47_000_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: DappStaking StakerInfo (r:4 w:3)
	/// Proof: DappStaking StakerInfo (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: DappStaking Ledger (r:1 w:1)
	/// Proof: DappStaking Ledger (max_values: None, max_size: Some(250), added: 2725, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// The range of component `x` is `[1, 3]`.
	fn cleanup_expired_entries(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `250 + x * (75 Â±0)`
		//  Estimated: `4764 + x * (2613 Â±0)`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(38_854_143, 4764)
			// Standard Error: 54_134
			.saturating_add(Weight::from_parts(7_359_116, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2613).saturating_mul(x.into()))
	}
	fn force() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
	}
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: DappStaking NextTierConfig (r:1 w:1)
	/// Proof: DappStaking NextTierConfig (max_values: Some(1), max_size: Some(161), added: 656, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:1)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(405), added: 2880, mode: MaxEncodedLen)
	/// Storage: DappStaking TierConfig (r:0 w:1)
	/// Proof: DappStaking TierConfig (max_values: Some(1), max_size: Some(161), added: 656, mode: MaxEncodedLen)
	fn on_initialize_voting_to_build_and_earn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `151`
		//  Estimated: `3870`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(24_000_000, 3870)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: DappStaking StaticTierParams (r:1 w:0)
	/// Proof: DappStaking StaticTierParams (max_values: Some(1), max_size: Some(167), added: 662, mode: MaxEncodedLen)
	/// Storage: DappStaking TierConfig (r:1 w:0)
	/// Proof: DappStaking TierConfig (max_values: Some(1), max_size: Some(161), added: 656, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:1)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(405), added: 2880, mode: MaxEncodedLen)
	/// Storage: DappStaking PeriodEnd (r:0 w:1)
	/// Proof: DappStaking PeriodEnd (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: DappStaking DAppTiers (r:0 w:1)
	/// Proof: DappStaking DAppTiers (max_values: None, max_size: Some(483), added: 2958, mode: MaxEncodedLen)
	/// Storage: DappStaking NextTierConfig (r:0 w:1)
	/// Proof: DappStaking NextTierConfig (max_values: Some(1), max_size: Some(161), added: 656, mode: MaxEncodedLen)
	fn on_initialize_build_and_earn_to_voting() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `685`
		//  Estimated: `3870`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(37_000_000, 3870)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: DappStaking CurrentEraInfo (r:1 w:1)
	/// Proof: DappStaking CurrentEraInfo (max_values: Some(1), max_size: Some(112), added: 607, mode: MaxEncodedLen)
	/// Storage: DappStaking EraRewards (r:1 w:1)
	/// Proof: DappStaking EraRewards (max_values: None, max_size: Some(405), added: 2880, mode: MaxEncodedLen)
	/// Storage: DappStaking DAppTiers (r:0 w:1)
	/// Proof: DappStaking DAppTiers (max_values: None, max_size: Some(483), added: 2958, mode: MaxEncodedLen)
	fn on_initialize_build_and_earn_to_build_and_earn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `73`
		//  Estimated: `3870`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 3870)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: DappStaking ContractStake (r:101 w:0)
	/// Proof: DappStaking ContractStake (max_values: Some(65535), max_size: Some(93), added: 2073, mode: MaxEncodedLen)
	/// Storage: DappStaking TierConfig (r:1 w:0)
	/// Proof: DappStaking TierConfig (max_values: Some(1), max_size: Some(161), added: 656, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 100]`.
	fn dapp_tier_assignment(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `158 + x * (33 Â±0)`
		//  Estimated: `3063 + x * (2073 Â±0)`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(12_709_998, 3063)
			// Standard Error: 8_047
			.saturating_add(Weight::from_parts(2_731_946, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2073).saturating_mul(x.into()))
	}
}
