// This file is part of Astar.

// Copyright (C) 2019-2023 Stake Technologies Pte.Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// Astar is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Astar is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Astar. If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_dapps_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-04, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `devserver-01`, CPU: `Intel(R) Xeon(R) E-2236 CPU @ 3.40GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("shibuya-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/astar-collator
// benchmark
// pallet
// --chain=shibuya-dev
// --steps=50
// --repeat=20
// --pallet=pallet_dapps_staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./benchmark-results/dapps_staking_weights.rs
// --template=./scripts/templates/weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_dapps_staking.
pub trait WeightInfo {
	fn register() -> Weight;
	fn unregister() -> Weight;
	fn withdraw_from_unregistered() -> Weight;
	fn bond_and_stake() -> Weight;
	fn unbond_and_unstake() -> Weight;
	fn withdraw_unbonded() -> Weight;
	fn nomination_transfer() -> Weight;
	fn claim_staker_with_restake() -> Weight;
	fn claim_staker_without_restake() -> Weight;
	fn claim_dapp() -> Weight;
	fn force_new_era() -> Weight;
	fn maintenance_mode() -> Weight;
	fn set_reward_destination() -> Weight;
}

/// Weights for pallet_dapps_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: DappsStaking RegisteredDevelopers (r:1 w:1)
	// Proof: DappsStaking RegisteredDevelopers (max_values: None, max_size: Some(81), added: 2556, mode: MaxEncodedLen)
	// Storage: DappsStaking RegisteredDapps (r:1 w:1)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	fn register() -> Weight {
		// Minimum execution time: 25_265 nanoseconds.
		Weight::from_ref_time(26_091_000)
			.saturating_add(Weight::from_proof_size(5117))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:1)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn unregister() -> Weight {
		// Minimum execution time: 27_241 nanoseconds.
		Weight::from_ref_time(27_411_000)
			.saturating_add(Weight::from_proof_size(5164))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralStakerInfo (r:1 w:1)
	// Proof: DappsStaking GeneralStakerInfo (max_values: None, max_size: Some(298), added: 2773, mode: MaxEncodedLen)
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Proof: DappsStaking Ledger (max_values: None, max_size: Some(266), added: 2741, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralEraInfo (r:1 w:1)
	// Proof: DappsStaking GeneralEraInfo (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	fn withdraw_from_unregistered() -> Weight {
		// Minimum execution time: 44_491 nanoseconds.
		Weight::from_ref_time(45_042_000)
			.saturating_add(Weight::from_proof_size(17003))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Proof: DappsStaking Ledger (max_values: None, max_size: Some(266), added: 2741, mode: MaxEncodedLen)
	// Storage: DappsStaking ContractEraStake (r:1 w:1)
	// Proof: DappsStaking ContractEraStake (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralStakerInfo (r:1 w:1)
	// Proof: DappsStaking GeneralStakerInfo (max_values: None, max_size: Some(298), added: 2773, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralEraInfo (r:1 w:1)
	// Proof: DappsStaking GeneralEraInfo (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	fn bond_and_stake() -> Weight {
		// Minimum execution time: 43_099 nanoseconds.
		Weight::from_ref_time(43_939_000)
			.saturating_add(Weight::from_proof_size(16957))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralStakerInfo (r:1 w:1)
	// Proof: DappsStaking GeneralStakerInfo (max_values: None, max_size: Some(298), added: 2773, mode: MaxEncodedLen)
	// Storage: DappsStaking ContractEraStake (r:1 w:1)
	// Proof: DappsStaking ContractEraStake (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Proof: DappsStaking Ledger (max_values: None, max_size: Some(266), added: 2741, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralEraInfo (r:1 w:1)
	// Proof: DappsStaking GeneralEraInfo (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	fn unbond_and_unstake() -> Weight {
		// Minimum execution time: 46_783 nanoseconds.
		Weight::from_ref_time(47_487_000)
			.saturating_add(Weight::from_proof_size(16957))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Proof: DappsStaking Ledger (max_values: None, max_size: Some(266), added: 2741, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralEraInfo (r:1 w:1)
	// Proof: DappsStaking GeneralEraInfo (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	fn withdraw_unbonded() -> Weight {
		// Minimum execution time: 30_952 nanoseconds.
		Weight::from_ref_time(31_615_000)
			.saturating_add(Weight::from_proof_size(9066))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: DappsStaking RegisteredDapps (r:2 w:0)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralStakerInfo (r:2 w:2)
	// Proof: DappsStaking GeneralStakerInfo (max_values: None, max_size: Some(298), added: 2773, mode: MaxEncodedLen)
	// Storage: DappsStaking ContractEraStake (r:2 w:2)
	// Proof: DappsStaking ContractEraStake (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	fn nomination_transfer() -> Weight {
		// Minimum execution time: 38_247 nanoseconds.
		Weight::from_ref_time(38_832_000)
			.saturating_add(Weight::from_proof_size(15782))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: DappsStaking GeneralStakerInfo (r:1 w:1)
	// Proof: DappsStaking GeneralStakerInfo (max_values: None, max_size: Some(298), added: 2773, mode: MaxEncodedLen)
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: DappsStaking ContractEraStake (r:2 w:1)
	// Proof: DappsStaking ContractEraStake (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralEraInfo (r:2 w:1)
	// Proof: DappsStaking GeneralEraInfo (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Proof: DappsStaking Ledger (max_values: None, max_size: Some(266), added: 2741, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_staker_with_restake() -> Weight {
		// Minimum execution time: 60_558 nanoseconds.
		Weight::from_ref_time(61_264_000)
			.saturating_add(Weight::from_proof_size(24668))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: DappsStaking GeneralStakerInfo (r:1 w:1)
	// Proof: DappsStaking GeneralStakerInfo (max_values: None, max_size: Some(298), added: 2773, mode: MaxEncodedLen)
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: DappsStaking ContractEraStake (r:1 w:0)
	// Proof: DappsStaking ContractEraStake (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralEraInfo (r:1 w:0)
	// Proof: DappsStaking GeneralEraInfo (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: DappsStaking Ledger (r:1 w:0)
	// Proof: DappsStaking Ledger (max_values: None, max_size: Some(266), added: 2741, mode: MaxEncodedLen)
	fn claim_staker_without_restake() -> Weight {
		// Minimum execution time: 33_178 nanoseconds.
		Weight::from_ref_time(33_576_000)
			.saturating_add(Weight::from_proof_size(13183))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: DappsStaking ContractEraStake (r:1 w:1)
	// Proof: DappsStaking ContractEraStake (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralEraInfo (r:1 w:0)
	// Proof: DappsStaking GeneralEraInfo (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	fn claim_dapp() -> Weight {
		// Minimum execution time: 25_126 nanoseconds.
		Weight::from_ref_time(25_489_000)
			.saturating_add(Weight::from_proof_size(7669))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn force_new_era() -> Weight {
		// Minimum execution time: 3_446 nanoseconds.
		Weight::from_ref_time(3_676_000)
			.saturating_add(Weight::from_proof_size(0))
	}
	fn maintenance_mode() -> Weight {
		// Minimum execution time: 7_871 nanoseconds.
		Weight::from_ref_time(8_137_000)
			.saturating_add(Weight::from_proof_size(0))
	}
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Proof: DappsStaking Ledger (max_values: None, max_size: Some(266), added: 2741, mode: MaxEncodedLen)
	fn set_reward_destination() -> Weight {
		// Minimum execution time: 15_697 nanoseconds.
		Weight::from_ref_time(16_009_000)
			.saturating_add(Weight::from_proof_size(2741))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: DappsStaking RegisteredDevelopers (r:1 w:1)
	// Proof: DappsStaking RegisteredDevelopers (max_values: None, max_size: Some(81), added: 2556, mode: MaxEncodedLen)
	// Storage: DappsStaking RegisteredDapps (r:1 w:1)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	fn register() -> Weight {
		// Minimum execution time: 25_265 nanoseconds.
		Weight::from_ref_time(26_091_000)
			.saturating_add(Weight::from_proof_size(5117))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:1)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn unregister() -> Weight {
		// Minimum execution time: 27_241 nanoseconds.
		Weight::from_ref_time(27_411_000)
			.saturating_add(Weight::from_proof_size(5164))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralStakerInfo (r:1 w:1)
	// Proof: DappsStaking GeneralStakerInfo (max_values: None, max_size: Some(298), added: 2773, mode: MaxEncodedLen)
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Proof: DappsStaking Ledger (max_values: None, max_size: Some(266), added: 2741, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralEraInfo (r:1 w:1)
	// Proof: DappsStaking GeneralEraInfo (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	fn withdraw_from_unregistered() -> Weight {
		// Minimum execution time: 44_491 nanoseconds.
		Weight::from_ref_time(45_042_000)
			.saturating_add(Weight::from_proof_size(17003))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Proof: DappsStaking Ledger (max_values: None, max_size: Some(266), added: 2741, mode: MaxEncodedLen)
	// Storage: DappsStaking ContractEraStake (r:1 w:1)
	// Proof: DappsStaking ContractEraStake (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralStakerInfo (r:1 w:1)
	// Proof: DappsStaking GeneralStakerInfo (max_values: None, max_size: Some(298), added: 2773, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralEraInfo (r:1 w:1)
	// Proof: DappsStaking GeneralEraInfo (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	fn bond_and_stake() -> Weight {
		// Minimum execution time: 43_099 nanoseconds.
		Weight::from_ref_time(43_939_000)
			.saturating_add(Weight::from_proof_size(16957))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralStakerInfo (r:1 w:1)
	// Proof: DappsStaking GeneralStakerInfo (max_values: None, max_size: Some(298), added: 2773, mode: MaxEncodedLen)
	// Storage: DappsStaking ContractEraStake (r:1 w:1)
	// Proof: DappsStaking ContractEraStake (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Proof: DappsStaking Ledger (max_values: None, max_size: Some(266), added: 2741, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralEraInfo (r:1 w:1)
	// Proof: DappsStaking GeneralEraInfo (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	fn unbond_and_unstake() -> Weight {
		// Minimum execution time: 46_783 nanoseconds.
		Weight::from_ref_time(47_487_000)
			.saturating_add(Weight::from_proof_size(16957))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Proof: DappsStaking Ledger (max_values: None, max_size: Some(266), added: 2741, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralEraInfo (r:1 w:1)
	// Proof: DappsStaking GeneralEraInfo (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	fn withdraw_unbonded() -> Weight {
		// Minimum execution time: 30_952 nanoseconds.
		Weight::from_ref_time(31_615_000)
			.saturating_add(Weight::from_proof_size(9066))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: DappsStaking RegisteredDapps (r:2 w:0)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralStakerInfo (r:2 w:2)
	// Proof: DappsStaking GeneralStakerInfo (max_values: None, max_size: Some(298), added: 2773, mode: MaxEncodedLen)
	// Storage: DappsStaking ContractEraStake (r:2 w:2)
	// Proof: DappsStaking ContractEraStake (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	fn nomination_transfer() -> Weight {
		// Minimum execution time: 38_247 nanoseconds.
		Weight::from_ref_time(38_832_000)
			.saturating_add(Weight::from_proof_size(15782))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	// Storage: DappsStaking GeneralStakerInfo (r:1 w:1)
	// Proof: DappsStaking GeneralStakerInfo (max_values: None, max_size: Some(298), added: 2773, mode: MaxEncodedLen)
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: DappsStaking ContractEraStake (r:2 w:1)
	// Proof: DappsStaking ContractEraStake (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralEraInfo (r:2 w:1)
	// Proof: DappsStaking GeneralEraInfo (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Proof: DappsStaking Ledger (max_values: None, max_size: Some(266), added: 2741, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_staker_with_restake() -> Weight {
		// Minimum execution time: 60_558 nanoseconds.
		Weight::from_ref_time(61_264_000)
			.saturating_add(Weight::from_proof_size(24668))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	// Storage: DappsStaking GeneralStakerInfo (r:1 w:1)
	// Proof: DappsStaking GeneralStakerInfo (max_values: None, max_size: Some(298), added: 2773, mode: MaxEncodedLen)
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: DappsStaking ContractEraStake (r:1 w:0)
	// Proof: DappsStaking ContractEraStake (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralEraInfo (r:1 w:0)
	// Proof: DappsStaking GeneralEraInfo (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: DappsStaking Ledger (r:1 w:0)
	// Proof: DappsStaking Ledger (max_values: None, max_size: Some(266), added: 2741, mode: MaxEncodedLen)
	fn claim_staker_without_restake() -> Weight {
		// Minimum execution time: 33_178 nanoseconds.
		Weight::from_ref_time(33_576_000)
			.saturating_add(Weight::from_proof_size(13183))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: DappsStaking RegisteredDapps (r:1 w:0)
	// Proof: DappsStaking RegisteredDapps (max_values: None, max_size: Some(86), added: 2561, mode: MaxEncodedLen)
	// Storage: DappsStaking ContractEraStake (r:1 w:1)
	// Proof: DappsStaking ContractEraStake (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: DappsStaking GeneralEraInfo (r:1 w:0)
	// Proof: DappsStaking GeneralEraInfo (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	fn claim_dapp() -> Weight {
		// Minimum execution time: 25_126 nanoseconds.
		Weight::from_ref_time(25_489_000)
			.saturating_add(Weight::from_proof_size(7669))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn force_new_era() -> Weight {
		// Minimum execution time: 3_446 nanoseconds.
		Weight::from_ref_time(3_676_000)
			.saturating_add(Weight::from_proof_size(0))
	}
	fn maintenance_mode() -> Weight {
		// Minimum execution time: 7_871 nanoseconds.
		Weight::from_ref_time(8_137_000)
			.saturating_add(Weight::from_proof_size(0))
	}
	// Storage: DappsStaking Ledger (r:1 w:1)
	// Proof: DappsStaking Ledger (max_values: None, max_size: Some(266), added: 2741, mode: MaxEncodedLen)
	fn set_reward_destination() -> Weight {
		// Minimum execution time: 15_697 nanoseconds.
		Weight::from_ref_time(16_009_000)
			.saturating_add(Weight::from_proof_size(2741))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}