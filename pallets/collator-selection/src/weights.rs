// This file is part of Astar.

// Copyright (C) 2019-2023 Stake Technologies Pte.Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


//! Autogenerated weights for pallet_collator_selection
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-04, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `devserver-01`, CPU: `Intel(R) Xeon(R) E-2236 CPU @ 3.40GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("shibuya-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/astar-collator
// benchmark
// pallet
// --chain=shibuya-dev
// --steps=50
// --repeat=20
// --pallet=pallet_collator_selection
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./benchmark-results/collator_selection_weights.rs
// --template=./scripts/templates/weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_collator_selection.
pub trait WeightInfo {
	fn set_invulnerables(b: u32, ) -> Weight;
	fn set_desired_candidates() -> Weight;
	fn set_candidacy_bond() -> Weight;
	fn register_as_candidate(c: u32, ) -> Weight;
	fn leave_intent(c: u32, ) -> Weight;
	fn note_author() -> Weight;
	fn new_session(r: u32, c: u32, ) -> Weight;
}

/// Weights for pallet_collator_selection using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Session NextKeys (r:48 w:0)
	// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
	// Storage: CollatorSelection Invulnerables (r:0 w:1)
	// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[1, 48]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Minimum execution time: 14_956 nanoseconds.
		Weight::from_ref_time(15_730_242)
			.saturating_add(Weight::from_proof_size(408))
			// Standard Error: 4_959
			.saturating_add(Weight::from_ref_time(2_577_606).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2633).saturating_mul(b.into()))
	}
	// Storage: CollatorSelection DesiredCandidates (r:0 w:1)
	// Proof Skipped: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: None, mode: Measured)
	fn set_desired_candidates() -> Weight {
		// Minimum execution time: 7_042 nanoseconds.
		Weight::from_ref_time(7_159_000)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: CollatorSelection CandidacyBond (r:0 w:1)
	// Proof Skipped: CollatorSelection CandidacyBond (max_values: Some(1), max_size: None, mode: Measured)
	fn set_candidacy_bond() -> Weight {
		// Minimum execution time: 7_245 nanoseconds.
		Weight::from_ref_time(7_395_000)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection DesiredCandidates (r:1 w:0)
	// Proof Skipped: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection Invulnerables (r:1 w:0)
	// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session NextKeys (r:1 w:0)
	// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
	// Storage: CollatorSelection CandidacyBond (r:1 w:0)
	// Proof Skipped: CollatorSelection CandidacyBond (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection LastAuthoredBlock (r:0 w:1)
	// Proof Skipped: CollatorSelection LastAuthoredBlock (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 148]`.
	fn register_as_candidate(c: u32, ) -> Weight {
		// Minimum execution time: 39_356 nanoseconds.
		Weight::from_ref_time(42_616_377)
			.saturating_add(Weight::from_proof_size(9891))
			// Standard Error: 670
			.saturating_add(Weight::from_ref_time(39_880).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(306).saturating_mul(c.into()))
	}
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection LastAuthoredBlock (r:0 w:1)
	// Proof Skipped: CollatorSelection LastAuthoredBlock (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[6, 148]`.
	fn leave_intent(c: u32, ) -> Weight {
		// Minimum execution time: 28_341 nanoseconds.
		Weight::from_ref_time(30_119_984)
			.saturating_add(Weight::from_proof_size(1369))
			// Standard Error: 1_581
			.saturating_add(Weight::from_ref_time(42_495).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(98).saturating_mul(c.into()))
	}
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: CollatorSelection LastAuthoredBlock (r:0 w:1)
	// Proof Skipped: CollatorSelection LastAuthoredBlock (max_values: None, max_size: None, mode: Measured)
	fn note_author() -> Weight {
		// Minimum execution time: 31_536 nanoseconds.
		Weight::from_ref_time(31_986_000)
			.saturating_add(Weight::from_proof_size(5497))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: CollatorSelection Candidates (r:1 w:0)
	// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection LastAuthoredBlock (r:148 w:0)
	// Proof Skipped: CollatorSelection LastAuthoredBlock (max_values: None, max_size: None, mode: Measured)
	// Storage: CollatorSelection Invulnerables (r:1 w:0)
	// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: System Account (r:143 w:143)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: CollatorSelection SlashDestination (r:1 w:0)
	// Proof Skipped: CollatorSelection SlashDestination (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `r` is `[1, 148]`.
	/// The range of component `c` is `[1, 148]`.
	fn new_session(r: u32, c: u32, ) -> Weight {
		// Minimum execution time: 16_816 nanoseconds.
		Weight::from_ref_time(17_132_000)
			.saturating_add(Weight::from_proof_size(4714))
			// Standard Error: 475_405
			.saturating_add(Weight::from_ref_time(15_758_567).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_proof_size(3131).saturating_mul(c.into()))
			.saturating_add(Weight::from_proof_size(2751).saturating_mul(r.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Session NextKeys (r:48 w:0)
	// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
	// Storage: CollatorSelection Invulnerables (r:0 w:1)
	// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[1, 48]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Minimum execution time: 14_956 nanoseconds.
		Weight::from_ref_time(15_730_242)
			.saturating_add(Weight::from_proof_size(408))
			// Standard Error: 4_959
			.saturating_add(Weight::from_ref_time(2_577_606).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2633).saturating_mul(b.into()))
	}
	// Storage: CollatorSelection DesiredCandidates (r:0 w:1)
	// Proof Skipped: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: None, mode: Measured)
	fn set_desired_candidates() -> Weight {
		// Minimum execution time: 7_042 nanoseconds.
		Weight::from_ref_time(7_159_000)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: CollatorSelection CandidacyBond (r:0 w:1)
	// Proof Skipped: CollatorSelection CandidacyBond (max_values: Some(1), max_size: None, mode: Measured)
	fn set_candidacy_bond() -> Weight {
		// Minimum execution time: 7_245 nanoseconds.
		Weight::from_ref_time(7_395_000)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection DesiredCandidates (r:1 w:0)
	// Proof Skipped: CollatorSelection DesiredCandidates (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection Invulnerables (r:1 w:0)
	// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session NextKeys (r:1 w:0)
	// Proof Skipped: Session NextKeys (max_values: None, max_size: None, mode: Measured)
	// Storage: CollatorSelection CandidacyBond (r:1 w:0)
	// Proof Skipped: CollatorSelection CandidacyBond (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection LastAuthoredBlock (r:0 w:1)
	// Proof Skipped: CollatorSelection LastAuthoredBlock (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 148]`.
	fn register_as_candidate(c: u32, ) -> Weight {
		// Minimum execution time: 39_356 nanoseconds.
		Weight::from_ref_time(42_616_377)
			.saturating_add(Weight::from_proof_size(9891))
			// Standard Error: 670
			.saturating_add(Weight::from_ref_time(39_880).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(306).saturating_mul(c.into()))
	}
	// Storage: CollatorSelection Candidates (r:1 w:1)
	// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection LastAuthoredBlock (r:0 w:1)
	// Proof Skipped: CollatorSelection LastAuthoredBlock (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[6, 148]`.
	fn leave_intent(c: u32, ) -> Weight {
		// Minimum execution time: 28_341 nanoseconds.
		Weight::from_ref_time(30_119_984)
			.saturating_add(Weight::from_proof_size(1369))
			// Standard Error: 1_581
			.saturating_add(Weight::from_ref_time(42_495).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(98).saturating_mul(c.into()))
	}
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: CollatorSelection LastAuthoredBlock (r:0 w:1)
	// Proof Skipped: CollatorSelection LastAuthoredBlock (max_values: None, max_size: None, mode: Measured)
	fn note_author() -> Weight {
		// Minimum execution time: 31_536 nanoseconds.
		Weight::from_ref_time(31_986_000)
			.saturating_add(Weight::from_proof_size(5497))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: CollatorSelection Candidates (r:1 w:0)
	// Proof Skipped: CollatorSelection Candidates (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: CollatorSelection LastAuthoredBlock (r:148 w:0)
	// Proof Skipped: CollatorSelection LastAuthoredBlock (max_values: None, max_size: None, mode: Measured)
	// Storage: CollatorSelection Invulnerables (r:1 w:0)
	// Proof Skipped: CollatorSelection Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: System Account (r:143 w:143)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: CollatorSelection SlashDestination (r:1 w:0)
	// Proof Skipped: CollatorSelection SlashDestination (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `r` is `[1, 148]`.
	/// The range of component `c` is `[1, 148]`.
	fn new_session(r: u32, c: u32, ) -> Weight {
		// Minimum execution time: 16_816 nanoseconds.
		Weight::from_ref_time(17_132_000)
			.saturating_add(Weight::from_proof_size(4714))
			// Standard Error: 475_405
			.saturating_add(Weight::from_ref_time(15_758_567).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_proof_size(3131).saturating_mul(c.into()))
			.saturating_add(Weight::from_proof_size(2751).saturating_mul(r.into()))
	}
}