// This file is part of Astar.

// Copyright (C) Stake Technologies Pte.Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// Astar is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Astar is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Astar. If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_collator_selection`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-09-25, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `gh-runner-01-ovh`, CPU: `Intel(R) Xeon(R) E-2236 CPU @ 3.40GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=./target/release/wbuild/astar-runtime/astar_runtime.compact.compressed.wasm
// --steps=50
// --repeat=20
// --pallet=pallet_collator_selection
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --json-input=./benchmark-results/astar/json/collator_selection_weights.json
// --output=./benchmark-results/astar/pallet/collator_selection_weights.rs
// --template=./scripts/templates/pallet-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(dead_code)]

use frame_support::{traits::Get, weights::{constants::RocksDbWeight, Weight}};
use core::marker::PhantomData;

/// Weight info trait.
pub trait WeightInfo {
	fn set_invulnerables(b: u32, ) -> Weight;
	fn add_invulnerable(i: u32, ) -> Weight;
	fn remove_invulnerable(i: u32, ) -> Weight;
	fn set_desired_candidates() -> Weight;
	fn set_candidacy_bond() -> Weight;
	fn register_as_candidate() -> Weight;
	fn apply_for_candidacy() -> Weight;
	fn close_application() -> Weight;
	fn approve_application(c: u32, ) -> Weight;
	fn kick_candidate(c: u32, ) -> Weight;
	fn leave_intent(c: u32, ) -> Weight;
	fn withdraw_bond() -> Weight;
	fn note_author() -> Weight;
	fn new_session(r: u32, c: u32, ) -> Weight;
}

/// Weight functions for `pallet_collator_selection`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// The range of component `b` is `[1, 48]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `206 + b * (79 ±0)`
		//  Estimated: `0`
		// Minimum execution time: 13_662_000 picoseconds.
		Weight::from_parts(12_508_678, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 4_373
			.saturating_add(Weight::from_parts(3_129_599, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// The range of component `i` is `[1, 47]`.
	fn add_invulnerable(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `476 + i * (43 ±0)`
		//  Estimated: `0`
		// Minimum execution time: 18_549_000 picoseconds.
		Weight::from_parts(19_653_308, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1_490
			.saturating_add(Weight::from_parts(80_814, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// The range of component `i` is `[2, 48]`.
	fn remove_invulnerable(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `153 + i * (32 ±0)`
		//  Estimated: `0`
		// Minimum execution time: 12_100_000 picoseconds.
		Weight::from_parts(12_603_771, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 495
			.saturating_add(Weight::from_parts(39_389, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_447_000 picoseconds.
		Weight::from_parts(6_532_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn set_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_353_000 picoseconds.
		Weight::from_parts(6_542_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn register_as_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_878_000 picoseconds.
		Weight::from_parts(6_090_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn apply_for_candidacy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `499`
		//  Estimated: `0`
		// Minimum execution time: 43_475_000 picoseconds.
		Weight::from_parts(43_998_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	fn close_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `204`
		//  Estimated: `0`
		// Minimum execution time: 25_561_000 picoseconds.
		Weight::from_parts(25_916_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// The range of component `c` is `[1, 148]`.
	fn approve_application(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `951 + c * (50 ±0)`
		//  Estimated: `0`
		// Minimum execution time: 28_312_000 picoseconds.
		Weight::from_parts(29_571_535, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 591
			.saturating_add(Weight::from_parts(57_387, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// The range of component `c` is `[6, 148]`.
	fn kick_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `892 + c * (50 ±0)`
		//  Estimated: `0`
		// Minimum execution time: 54_899_000 picoseconds.
		Weight::from_parts(56_992_252, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1_033
			.saturating_add(Weight::from_parts(57_441, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// The range of component `c` is `[6, 148]`.
	fn leave_intent(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `735 + c * (48 ±0)`
		//  Estimated: `0`
		// Minimum execution time: 18_218_000 picoseconds.
		Weight::from_parts(19_010_015, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 476
			.saturating_add(Weight::from_parts(49_506, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	fn withdraw_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `759`
		//  Estimated: `0`
		// Minimum execution time: 33_250_000 picoseconds.
		Weight::from_parts(33_638_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `259`
		//  Estimated: `0`
		// Minimum execution time: 44_741_000 picoseconds.
		Weight::from_parts(45_029_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// The range of component `r` is `[1, 148]`.
	/// The range of component `c` is `[1, 148]`.
	fn new_session(_r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4688 + c * (97 ±0) + r * (112 ±0)`
		//  Estimated: `0`
		// Minimum execution time: 25_341_000 picoseconds.
		Weight::from_parts(25_767_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 656_944
			.saturating_add(Weight::from_parts(21_823_460, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
	}
}

/// Weights for tests
impl WeightInfo for () {
	/// The range of component `b` is `[1, 48]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `206 + b * (79 ±0)`
		//  Estimated: `0`
		// Minimum execution time: 13_662_000 picoseconds.
		Weight::from_parts(12_508_678, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 4_373
			.saturating_add(Weight::from_parts(3_129_599, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// The range of component `i` is `[1, 47]`.
	fn add_invulnerable(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `476 + i * (43 ±0)`
		//  Estimated: `0`
		// Minimum execution time: 18_549_000 picoseconds.
		Weight::from_parts(19_653_308, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1_490
			.saturating_add(Weight::from_parts(80_814, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// The range of component `i` is `[2, 48]`.
	fn remove_invulnerable(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `153 + i * (32 ±0)`
		//  Estimated: `0`
		// Minimum execution time: 12_100_000 picoseconds.
		Weight::from_parts(12_603_771, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 495
			.saturating_add(Weight::from_parts(39_389, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_447_000 picoseconds.
		Weight::from_parts(6_532_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn set_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_353_000 picoseconds.
		Weight::from_parts(6_542_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn register_as_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_878_000 picoseconds.
		Weight::from_parts(6_090_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn apply_for_candidacy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `499`
		//  Estimated: `0`
		// Minimum execution time: 43_475_000 picoseconds.
		Weight::from_parts(43_998_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	fn close_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `204`
		//  Estimated: `0`
		// Minimum execution time: 25_561_000 picoseconds.
		Weight::from_parts(25_916_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// The range of component `c` is `[1, 148]`.
	fn approve_application(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `951 + c * (50 ±0)`
		//  Estimated: `0`
		// Minimum execution time: 28_312_000 picoseconds.
		Weight::from_parts(29_571_535, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 591
			.saturating_add(Weight::from_parts(57_387, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	/// The range of component `c` is `[6, 148]`.
	fn kick_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `892 + c * (50 ±0)`
		//  Estimated: `0`
		// Minimum execution time: 54_899_000 picoseconds.
		Weight::from_parts(56_992_252, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1_033
			.saturating_add(Weight::from_parts(57_441, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	/// The range of component `c` is `[6, 148]`.
	fn leave_intent(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `735 + c * (48 ±0)`
		//  Estimated: `0`
		// Minimum execution time: 18_218_000 picoseconds.
		Weight::from_parts(19_010_015, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 476
			.saturating_add(Weight::from_parts(49_506, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	fn withdraw_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `759`
		//  Estimated: `0`
		// Minimum execution time: 33_250_000 picoseconds.
		Weight::from_parts(33_638_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `259`
		//  Estimated: `0`
		// Minimum execution time: 44_741_000 picoseconds.
		Weight::from_parts(45_029_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	/// The range of component `r` is `[1, 148]`.
	/// The range of component `c` is `[1, 148]`.
	fn new_session(_r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4688 + c * (97 ±0) + r * (112 ±0)`
		//  Estimated: `0`
		// Minimum execution time: 25_341_000 picoseconds.
		Weight::from_parts(25_767_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 656_944
			.saturating_add(Weight::from_parts(21_823_460, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
	}
}
