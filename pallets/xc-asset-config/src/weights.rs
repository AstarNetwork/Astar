
// This file is part of Astar.

// Copyright (C) Stake Technologies Pte.Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// Astar is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Astar is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Astar. If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_xc_asset_config`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-09-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `gh-runner-01-ovh`, CPU: `Intel(R) Xeon(R) E-2236 CPU @ 3.40GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=./target/release/wbuild/astar-runtime/astar_runtime.compact.compressed.wasm
// --steps=50
// --repeat=20
// --pallet=pallet_xc_asset_config
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --json-input=./benchmark-results/astar/json/xc_asset_config_weights.json
// --output=./benchmark-results/astar/pallet/xc_asset_config_weights.rs
// --template=./scripts/templates/pallet-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(dead_code)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

/// Weight info trait.
pub trait WeightInfo {
	fn register_asset_location() -> Weight;
	fn set_asset_units_per_second() -> Weight;
	fn change_existing_asset_location() -> Weight;
	fn remove_payment_asset() -> Weight;
	fn remove_asset() -> Weight;
	fn update_migration_step() -> Weight;
}

/// Weight functions for `pallet_xc_asset_config`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn register_asset_location() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `0`
		// Minimum execution time: 13_380_000 picoseconds.
		Weight::from_parts(19_271_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	fn set_asset_units_per_second() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `93`
		//  Estimated: `0`
		// Minimum execution time: 13_646_000 picoseconds.
		Weight::from_parts(13_783_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn change_existing_asset_location() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141`
		//  Estimated: `0`
		// Minimum execution time: 20_585_000 picoseconds.
		Weight::from_parts(21_047_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	fn remove_payment_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_512_000 picoseconds.
		Weight::from_parts(8_726_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn remove_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `128`
		//  Estimated: `0`
		// Minimum execution time: 15_777_000 picoseconds.
		Weight::from_parts(16_003_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	fn update_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_537_000 picoseconds.
		Weight::from_parts(6_730_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
