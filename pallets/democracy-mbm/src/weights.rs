
// This file is part of Astar.

// Copyright (C) Stake Technologies Pte.Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// Astar is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Astar is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Astar. If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for democracy_mbm
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.1
//! DATE: 2025-05-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Ps-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("astar-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/astar-collator
// benchmark
// pallet
// --chain=astar-dev
// --steps=50
// --repeat=20
// --pallet=democracy_mbm
// --extrinsic=
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./mbm_weights.rs
// --template=./scripts/templates/weight-template.hbs
// --log
// info

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for democracy_mbm.
pub trait WeightInfo {
    fn migration_referendum_info() -> Weight;
    fn migration_voting_of() -> Weight;
}

/// Weights for democracy_mbm using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// Storage: `Democracy::ReferendumInfoOf` (r:2 w:1)
    /// Proof: `Democracy::ReferendumInfoOf` (`max_values`: None, `max_size`: Some(201), added: 2676, mode: `MaxEncodedLen`)
    fn migration_referendum_info() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `182`
        //  Estimated: `6342`
        // Minimum execution time: 7_000_000 picoseconds.
        Weight::from_parts(7_000_000, 6342)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Democracy::VotingOf` (r:2 w:1)
    /// Proof: `Democracy::VotingOf` (`max_values`: None, `max_size`: Some(4831), added: 7306, mode: `MaxEncodedLen`)
    fn migration_voting_of() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `230`
        //  Estimated: `15602`
        // Minimum execution time: 22_000_000 picoseconds.
        Weight::from_parts(23_000_000, 15602)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// Storage: `Democracy::ReferendumInfoOf` (r:2 w:1)
    /// Proof: `Democracy::ReferendumInfoOf` (`max_values`: None, `max_size`: Some(201), added: 2676, mode: `MaxEncodedLen`)
    fn migration_referendum_info() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `182`
        //  Estimated: `6342`
        // Minimum execution time: 7_000_000 picoseconds.
        Weight::from_parts(7_000_000, 6342)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: `Democracy::VotingOf` (r:2 w:1)
    /// Proof: `Democracy::VotingOf` (`max_values`: None, `max_size`: Some(4831), added: 7306, mode: `MaxEncodedLen`)
    fn migration_voting_of() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `230`
        //  Estimated: `15602`
        // Minimum execution time: 22_000_000 picoseconds.
        Weight::from_parts(23_000_000, 15602)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
}
